diff -Naur dom/media/Makefile.in ../alder/dom/media/Makefile.in
--- dom/media/Makefile.in	2012-09-20 10:50:39.000000000 -0700
+++ ../alder/dom/media/Makefile.in	2012-09-28 15:38:49.000000000 -0700
@@ -19,8 +19,14 @@
 
 include $(topsrcdir)/dom/dom-config.mk
 
+EXTRA_COMPONENTS = \
+  PeerConnection.js \
+  PeerConnection.manifest \
+  $(NULL)
+
 XPIDLSRCS = \
   nsIDOMMediaStream.idl \
+  nsIDOMRTCPeerConnection.idl \
   nsIDOMNavigatorUserMedia.idl \
   $(NULL)
 
@@ -38,6 +44,7 @@
 LOCAL_INCLUDES += \
   -I$(topsrcdir)/media/webrtc/trunk/src \
   $(NULL)
+DIRS += bridge
 endif
 
 include $(topsrcdir)/config/config.mk
diff -Naur dom/media/MediaManager.cpp ../alder/dom/media/MediaManager.cpp
--- dom/media/MediaManager.cpp	2012-09-24 12:36:29.000000000 -0700
+++ ../alder/dom/media/MediaManager.cpp	2012-09-28 15:38:49.000000000 -0700
@@ -15,14 +15,20 @@
 #include "nsGlobalWindow.h"
 
 /* Using WebRTC backend on Desktops (Mac, Windows, Linux), otherwise default */
+#include "MediaEngineDefault.h"
 #if defined(MOZ_WEBRTC)
 #include "MediaEngineWebRTC.h"
-#else
-#include "MediaEngineDefault.h"
 #endif
 
 namespace mozilla {
 
+// We only support 1 audio and 1 video track for now.
+enum {
+  kVideoTrack = 1,
+  kAudioTrack = 2
+};
+
+
 /**
  * Send an error back to content. The error is the form a string.
  * Do this only on the main thread. The success callback is also passed here
@@ -216,7 +222,16 @@
     NS_ASSERTION(NS_IsMainThread(), "Only call on main thread");
 
     // Create a media stream.
-    nsCOMPtr<nsDOMMediaStream> stream = nsDOMMediaStream::CreateInputStream();
+    nsCOMPtr<nsDOMMediaStream> stream;
+    if (mTrackID == kVideoTrack) {
+      stream = nsDOMMediaStream::CreateInputStream(
+        nsDOMMediaStream::HINT_CONTENTS_VIDEO
+      );
+    } else {
+      stream = nsDOMMediaStream::CreateInputStream(
+        nsDOMMediaStream::HINT_CONTENTS_AUDIO
+      );
+    }
 
     nsPIDOMWindow *window = static_cast<nsPIDOMWindow*>
       (nsGlobalWindow::GetInnerWindowWithId(mWindowID));
@@ -284,7 +299,8 @@
     , mListeners(aListeners)
     , mWindowID(aWindowID)
     , mDevice(aDevice)
-    , mInited(true) {}
+    , mDeviceChosen(true)
+    , mBackendChosen(false) {}
 
   GetUserMediaRunnable(bool aAudio, bool aVideo, bool aPicture,
     already_AddRefed<nsIDOMGetUserMediaSuccessCallback> aSuccess,
@@ -297,15 +313,33 @@
     , mError(aError)
     , mListeners(aListeners)
     , mWindowID(aWindowID)
-    , mInited(false) {}
+    , mDeviceChosen(false)
+    , mBackendChosen(false) {}
 
-  ~GetUserMediaRunnable() {}
-
-  // We only support 1 audio and 1 video track for now.
-  enum {
-    kVideoTrack = 1,
-    kAudioTrack = 2
-  };
+  /**
+   * The caller can also choose to provide their own backend instead of
+   * using the one provided by MediaManager::GetBackend.
+   */
+  GetUserMediaRunnable(bool aAudio, bool aVideo,
+    already_AddRefed<nsIDOMGetUserMediaSuccessCallback> aSuccess,
+    already_AddRefed<nsIDOMGetUserMediaErrorCallback> aError,
+    StreamListeners* aListeners, uint64_t aWindowID, MediaEngine* aBackend)
+    : mAudio(aAudio)
+    , mVideo(aVideo)
+    , mPicture(false)
+    , mSuccess(aSuccess)
+    , mError(aError)
+    , mListeners(aListeners)
+    , mWindowID(aWindowID)
+    , mDeviceChosen(false)
+    , mBackendChosen(true)
+    , mBackend(aBackend) {}
+
+  ~GetUserMediaRunnable() {
+    if (mBackendChosen) {
+      delete mBackend;
+    }
+  }
 
   NS_IMETHOD
   Run()
@@ -314,13 +348,17 @@
 
     mManager = MediaManager::Get();
 
+    // Was a backend provided?
+    if (!mBackendChosen) {
+      mBackend = mManager->GetBackend();
+    }
+
     // Was a device provided?
-    if (!mInited) {
+    if (!mDeviceChosen) {
       nsresult rv = SelectDevice();
       if (rv != NS_OK) {
         return rv;
       }
-      mInited = true;
     }
 
     // It is an error if audio or video are requested along with picture.
@@ -363,7 +401,7 @@
     uint32_t count;
     if (mPicture || mVideo) {
       nsTArray<nsRefPtr<MediaEngineVideoSource> > videoSources;
-      mManager->GetBackend()->EnumerateVideoDevices(&videoSources);
+      mBackend->EnumerateVideoDevices(&videoSources);
 
       count = videoSources.Length();
       if (count <= 0) {
@@ -375,7 +413,7 @@
       mDevice = new MediaDevice(videoSources[0]);
     } else {
       nsTArray<nsRefPtr<MediaEngineAudioSource> > audioSources;
-      mManager->GetBackend()->EnumerateAudioDevices(&audioSources);
+      mBackend->EnumerateAudioDevices(&audioSources);
 
       count = audioSources.Length();
       if (count <= 0) {
@@ -450,7 +488,10 @@
   uint64_t mWindowID;
   nsRefPtr<MediaDevice> mDevice;
 
-  bool mInited;
+  bool mDeviceChosen;
+  bool mBackendChosen;
+
+  MediaEngine* mBackend;
   MediaManager* mManager;
 };
 
@@ -534,7 +575,10 @@
 
   /* Get options */
   nsresult rv;
-  bool audio, video, picture;
+  bool fake, audio, video, picture;
+
+  rv = aParams->GetFake(&fake);
+  NS_ENSURE_SUCCESS(rv, rv);
 
   rv = aParams->GetPicture(&picture);
   NS_ENSURE_SUCCESS(rv, rv);
@@ -620,14 +664,24 @@
    * optionally be a MediaDevice object, which should provided if one was
    * selected by the user via the UI, or was provided by privileged code
    * via the device: attribute via nsIMediaStreamOptions.
+   *
+   * If a fake stream was requested, we force the use of the default backend.
    */
   nsCOMPtr<nsIRunnable> gUMRunnable;
-  if (device) {
+  if (fake) {
+    // Fake stream from default backend.
+    gUMRunnable = new GetUserMediaRunnable(
+      audio, video, onSuccess.forget(), onError.forget(), listeners,
+      windowID, new MediaEngineDefault()
+    );
+  } else if (device) {
+    // Stream from provided device.
     gUMRunnable = new GetUserMediaRunnable(
       audio, video, picture, onSuccess.forget(), onError.forget(), listeners,
       windowID, static_cast<MediaDevice*>(device.get())
     );
   } else {
+    // Stream from default device from WebRTC backend.
     gUMRunnable = new GetUserMediaRunnable(
       audio, video, picture, onSuccess.forget(), onError.forget(), listeners,
       windowID
diff -Naur dom/media/PeerConnection.js ../alder/dom/media/PeerConnection.js
--- dom/media/PeerConnection.js	1969-12-31 16:00:00.000000000 -0800
+++ ../alder/dom/media/PeerConnection.js	2012-09-28 15:56:48.000000000 -0700
@@ -0,0 +1,543 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+const IDService = {};
+const {classes: Cc, interfaces: Ci, utils: Cu} = Components;
+
+Cu.import("resource://gre/modules/Services.jsm");
+Cu.import("resource://gre/modules/XPCOMUtils.jsm");
+Cu.import("resource://gre/modules/identity/WebRTC.jsm", IDService);
+
+const PC_CONTRACT = "@mozilla.org/dom/peerconnection;1";
+const PC_ICE_CONTRACT = "@mozilla.org/dom/rtcicecandidate;1";
+const PC_SESSION_CONTRACT = "@mozilla.org/dom/rtcsessiondescription;1";
+
+const PC_CID = Components.ID("{7cb2b368-b1ce-4560-acac-8e0dbda7d3d0}");
+const PC_ICE_CID = Components.ID("{8c5dbd70-2c8e-4ecb-a5ad-2fc919099f01}");
+const PC_SESSION_CID = Components.ID("{5f21ffd9-b73f-4ba0-a685-56b4667aaf1c}");
+
+// Global list of PeerConnection objects, so they can be cleaned up when
+// a page is torn down. (Maps outer window ID to an array of PC objects).
+function GlobalPCList() {
+  this._list = {};
+  Services.obs.addObserver(this, "outer-window-destroyed", true);
+}
+GlobalPCList.prototype = {
+  QueryInterface: XPCOMUtils.generateQI([Ci.nsIObserver,
+                                         Ci.nsISupportsWeakReference]),
+
+  addPC: function(pc) {
+    let winID = pc._winID;
+    if (this._list[winID]) {
+      this._list[winID].push(pc);
+    } else {
+      this._list[winID] = [pc];
+    }
+  },
+
+  observe: function(subject, topic, data) {
+    if (topic != "outer-window-destroyed") {
+      return;
+    }
+    let winID = subject.QueryInterface(Ci.nsISupportsPRUint64).data;
+    if (this._list[winID]) {
+      this._list[winID].forEach(function(pc) {
+        pc._pc.close();
+        delete pc._observer;
+      });
+      delete this._list[winID];
+    }
+  }
+};
+let _globalPCList = new GlobalPCList();
+
+function IceCandidate(candidate) {
+  this.candidate = candidate;
+  this.sdpMid = null;
+  this.sdpMLineIndex = null;
+}
+IceCandidate.prototype = {
+  classID: PC_ICE_CID,
+
+  classInfo: XPCOMUtils.generateCI({classID: PC_ICE_CID,
+                                    contractID: PC_ICE_CONTRACT,
+                                    classDescription: "IceCandidate",
+                                    interfaces: [
+                                      Ci.nsIDOMRTCIceCandidate,
+                                      Ci.nsIDOMGlobalObjectConstructor
+                                    ],
+                                    flags: Ci.nsIClassInfo.DOM_OBJECT}),
+
+  QueryInterface: XPCOMUtils.generateQI([
+    Ci.nsIDOMRTCIceCandidate, Ci.nsIDOMGlobalObjectConstructor
+  ]),
+
+  constructor: function(win, cand, mid, mline) {
+    this._win = win;
+    this.candidate = cand;
+    this.sdpMid = mid;
+    this.sdpMLineIndex = mline;
+  }
+};
+
+function SessionDescription(type, sdp) {
+  this.type = type;
+  this.sdp = sdp;
+}
+SessionDescription.prototype = {
+  classID: PC_SESSION_CID,
+
+  classInfo: XPCOMUtils.generateCI({classID: PC_SESSION_CID,
+                                    contractID: PC_SESSION_CONTRACT,
+                                    classDescription: "SessionDescription",
+                                    interfaces: [
+                                      Ci.nsIDOMRTCSessionDescription,
+                                      Ci.nsIDOMGlobalObjectConstructor
+                                    ],
+                                    flags: Ci.nsIClassInfo.DOM_OBJECT}),
+
+  QueryInterface: XPCOMUtils.generateQI([
+    Ci.nsIDOMRTCSessionDescription, Ci.nsIDOMGlobalObjectConstructor
+  ]),
+
+  constructor: function(win, type, sdp) {
+    this._win = win;
+    this.type = type;
+    this.sdp = sdp;
+  },
+
+  toString: function() {
+    return JSON.stringify({
+      type: this.type, sdp: this.sdp
+    });
+  }
+};
+
+function PeerConnection() {
+  this._queue = [];
+
+  this._pc = null;
+  this._observer = null;
+  this._identity = null;
+
+  this._onCreateOfferSuccess = null;
+  this._onCreateOfferFailure = null;
+  this._onCreateAnswerSuccess = null;
+  this._onCreateAnswerFailure = null;
+
+  /**
+   * Everytime we get a request from content, we put it in the queue. If
+   * there are no pending operations though, we will execute it immediately.
+   * In PeerConnectionObserver, whenever we are notified that an operation
+   * has finished, we will check the queue for the next operation and execute
+   * if neccesary. The _pending flag indicates whether an operation is currently
+   * in progress.
+   */
+  this._pending = false;
+
+  // Public attributes.
+  this.onaddstream = null;
+  this.onremovestream = null;
+  this.onicecandidate = null;
+  this.onstatechange = null;
+  this.ongatheringchange = null;
+  this.onicechange = null;
+}
+PeerConnection.prototype = {
+  classID: PC_CID,
+
+  classInfo: XPCOMUtils.generateCI({classID: PC_CID,
+                                    contractID: PC_CONTRACT,
+                                    classDescription: "PeerConnection",
+                                    interfaces: [
+                                      Ci.nsIDOMRTCPeerConnection,
+                                      Ci.nsIDOMGlobalObjectConstructor
+                                    ],
+                                    flags: Ci.nsIClassInfo.DOM_OBJECT}),
+
+  QueryInterface: XPCOMUtils.generateQI([
+    Ci.nsIDOMRTCPeerConnection, Ci.nsIDOMGlobalObjectConstructor
+  ]),
+
+  // Constructor is an explicit function, because of nsIDOMGlobalObjectConstructor.
+  constructor: function(win) {
+    this._pc = Cc["@mozilla.org/peerconnection;1"].
+             createInstance(Ci.IPeerConnection);
+    this._observer = new PeerConnectionObserver(this);
+
+    // Nothing starts until ICE gathering completes.
+    this._queueOrRun({
+      func: this._pc.initialize,
+      args: [this._observer, win, Services.tm.currentThread],
+      wait: true
+    });
+
+    this._win = win;
+    this._winID = this._win.QueryInterface(Ci.nsIInterfaceRequestor)
+                           .getInterface(Ci.nsIDOMWindowUtils).outerWindowID;
+
+    // Add a reference to the PeerConnection to global list.
+    _globalPCList.addPC(this);
+  },
+
+  /**
+   * Add a function to the queue or run it immediately if the queue is empty.
+   * Argument is an object with the func, args and wait properties; wait should
+   * be set to true if the function has a success/error callback that will
+   * call _executeNext, false if it doesn't have a callback.
+   */
+  _queueOrRun: function(obj) {
+    if (!this._pending) {
+      obj.func.apply(this, obj.args);
+      if (obj.wait) {
+        this._pending = true;
+      }
+    } else {
+      this._queue.push(obj);
+    }
+  },
+
+  // Pick the next item from the queue and run it.
+  _executeNext: function() {
+    if (this._queue.length) {
+      let obj = this._queue.shift();
+      obj.func.apply(this, obj.args);
+      if (!obj.wait) {
+        this._executeNext();
+      }
+    } else {
+      this._pending = false;
+    }
+  },
+
+  createOffer: function(onSuccess, onError, constraints) {
+    if (this._onCreateOfferSuccess) {
+      if (onError) {
+        onError.onCallback("createOffer already called");
+      }
+      return;
+    }
+
+    this._onCreateOfferSuccess = onSuccess;
+    this._onCreateOfferFailure = onError;
+
+    // TODO: Implement constraints/hints.
+    if (!constraints) {
+      constraints = "";
+    }
+
+    this._queueOrRun({
+      func: this._pc.createOffer, args: [constraints], wait: true
+    });
+  },
+
+  createAnswer: function(offer, onSuccess, onError, constraints, provisional) {
+    if (this._onCreateAnswerSuccess) {
+      if (onError) {
+        onError.onCallback("createAnswer already called");
+      }
+      return;
+    }
+
+    this._onCreateAnswerSuccess = onSuccess;
+    this._onCreateAnswerFailure = onError;
+
+    if (offer.type != "offer") {
+      if (onError) {
+        onError.onCallback("Invalid type " + offer.type + " passed");
+      }
+      return;
+    }
+
+    if (!offer.sdp) {
+      if (onError) {
+        onError.onCallback("SDP not provided to createAnswer");
+      }
+      return;
+    }
+
+    if (!constraints) {
+      constraints = "";
+    }
+    if (!provisional) {
+      provisional = false;
+    }
+
+    // TODO: Implement provisional answer & constraints.
+    this._queueOrRun({
+      func: this._pc.createAnswer, args: ["", offer.sdp], wait: true
+    });
+  },
+
+  setLocalDescription: function(desc, onSuccess, onError) {
+    if (this._onSetLocalDescriptionSuccess) {
+      if (onError) {
+        onError.onCallback("setLocalDescription already called");
+      }
+      return;
+    }
+
+    this._onSetLocalDescriptionSuccess = onSuccess;
+    this._onSetLocalDescriptionFailure = onError;
+
+    let type;
+    switch (desc.type) {
+      case "offer":
+        type = Ci.IPeerConnection.kActionOffer;
+        break;
+      case "answer":
+        type = Ci.IPeerConnection.kActionAnswer;
+        break;
+      default:
+        if (onError) {
+          onError.onCallback(
+            "Invalid type " + desc.type + " provided to setLocalDescription"
+          );
+          return;
+        }
+        break;
+    }
+
+    this._queueOrRun({
+      func: this._pc.setLocalDescription, args: [type, desc.sdp], wait: true
+    });
+  },
+
+  setRemoteDescription: function(desc, onSuccess, onError) {
+    if (this._onSetRemoteDescriptionSuccess) {
+      if (onError) {
+        onError.onCallback("setRemoteDescription already called");
+      }
+      return;
+    }
+
+    this._onSetRemoteDescriptionSuccess = onSuccess;
+    this._onSetRemoteDescriptionFailure = onError;
+
+    let type;
+    switch (desc.type) {
+      case "offer":
+        type = Ci.IPeerConnection.kActionOffer;
+        break;
+      case "answer":
+        type = Ci.IPeerConnection.kActionAnswer;
+        break;
+      default:
+        if (onError) {
+          onError.onCallback(
+            "Invalid type " + desc.type + " provided to setLocalDescription"
+          );
+          return;
+        }
+        break;
+    }
+
+    this._queueOrRun({
+      func: this._pc.setRemoteDescription, args: [type, desc.sdp], wait: true
+    });
+  },
+
+  updateIce: function(config, constraints, restart) {
+    return Cr.NS_ERROR_NOT_IMPLEMENTED;
+  },
+
+  addIceCandidate: function(cand) {
+    if (!cand) {
+      throw "Invalid candidate passed to addIceCandidate!";
+    }
+    if (!cand.candidate || !cand.sdpMid || !cand.sdpMLineIndex) {
+      throw "Invalid candidate passed to addIceCandidate!";
+    }
+
+    this._queueOrRun({
+      func: this._pc.addIceCandidate,
+      args: [cand.candidate, cand.sdpMid, cand.sdpMLineIndex], wait: false
+    });
+  },
+
+  addStream: function(stream, constraints) {
+    // TODO: Implement constraints.
+    this._queueOrRun({func: this._pc.addStream, args: [stream], wait: false});
+  },
+
+  removeStream: function(stream) {
+    this._queueOrRun({func: this._pc.removeStream, args: [stream], wait: false});
+  }
+};
+
+// This is a seperate object because we don't want to expose it to DOM.
+function PeerConnectionObserver(dompc) {
+  this._dompc = dompc;
+}
+PeerConnectionObserver.prototype = {
+  QueryInterface: XPCOMUtils.generateQI([Ci.IPeerConnectionObserver]),
+
+  onCreateOfferSuccess: function(offer) {
+    if (this._dompc._onCreateOfferSuccess) {
+      try {
+        this._dompc._onCreateOfferSuccess.onCallback({
+          type: "offer", sdp: offer,
+          __exposedProps__: { type: "rw", sdp: "rw" }
+        });
+      } catch(e) {}
+    }
+    this._dompc._executeNext();
+  },
+
+  onCreateOfferError: function(code) {
+    if (this._dompc._onCreateOfferFailure) {
+      try {
+        this._dompc._onCreateOfferFailure.onCallback(code);
+      } catch(e) {}
+    }
+    this._dompc._executeNext();
+  },
+
+  onCreateAnswerSuccess: function(answer) {
+    if (this._dompc._onCreateAnswerSuccess) {
+      try {
+        this._dompc._onCreateAnswerSuccess.onCallback({
+          type: "answer", sdp: answer,
+          __exposedProps__: { type: "rw", sdp: "rw" }
+        });
+      } catch(e) {}
+    }
+    this._dompc._executeNext();
+  },
+
+  onCreateAnswerError: function(code) {
+    if (this._dompc._onCreateAnswerFailure) {
+      try {
+        this._dompc._onCreateAnswerFailure.onCallback(code);
+      } catch(e) {}
+    }
+    this._dompc._executeNext();
+  },
+
+  onSetLocalDescriptionSuccess: function(code) {
+    if (this._dompc._onSetLocalDescriptionSuccess) {
+      try {
+        this._dompc._onSetLocalDescriptionSuccess.onCallback(code);
+      } catch(e) {}
+    }
+    this._dompc._executeNext();
+  },
+
+  onSetRemoteDescriptionSuccess: function(code) {
+    if (this._dompc._onSetRemoteDescriptionSuccess) {
+      try {
+        this._dompc._onSetRemoteDescriptionSuccess.onCallback(code);
+      } catch(e) {}
+    }
+    this._dompc._executeNext();
+  },
+
+  onSetLocalDescriptionError: function(code) {
+    if (this._dompc._onSetLocalDescriptionFailure) {
+      try {
+        this._dompc._onSetLocalDescriptionFailure.onCallback(code);
+      } catch(e) {}
+    }
+    this._dompc._executeNext();
+  },
+
+  onSetRemoteDescriptionError: function(code) {
+    if (this._dompc._onSetRemoteDescriptionFailure) {
+      this._dompc._onSetRemoteDescriptionFailure.onCallback(code);
+    }
+    this._dompc._executeNext();
+  },
+
+  onStateChange: function(state) {
+    if (state != Ci.IPeerConnectionObserver.kIceState) {
+      return;
+    }
+
+    let self = this;
+    let iceCb = function() {};
+    let iceGatherCb = function() {};
+    if (this._dompc.onicechange) {
+      iceCb = function(args) {
+        try {
+          self._dompc.onicechange(args);
+        } catch(e) {}
+      };
+    }
+    if (this._dompc.ongatheringchange) {
+      iceGatherCb = function(args) {
+        try {
+          self._dompc.ongatheringchange(args);
+        } catch(e) {}
+      };
+    }
+
+    switch (this._dompc._pc.iceState) {
+      case Ci.IPeerConnection.kIceGathering:
+        iceGatherCb("gathering");
+        break;
+      case Ci.IPeerConnection.kIceWaiting:
+        iceCb("starting");
+        this._dompc._executeNext();
+        break;
+      case Ci.IPeerConnection.kIceChecking:
+        iceCb("checking");
+        this._dompc._executeNext();
+        break;
+      case Ci.IPeerConnection.kIceConnected:
+        // ICE gathering complete.
+        iceCb("connected");
+        iceGatherCb("complete");
+        this._dompc._executeNext();
+        break;
+      case Ci.IPeerConnection.kIceFailed:
+        iceCb("failed");
+        break;
+      default:
+        // Unknown state!
+        break;
+    }
+  },
+
+  onAddStream: function(stream, type) {
+    if (this._dompc.onaddstream) {
+      try {
+        this._dompc.onaddstream.onCallback({
+          stream: stream, type: type,
+          __exposedProps__: { stream: "r", type: "r" }
+        });
+      } catch(e) {}
+    }
+    this._dompc._executeNext();
+  },
+
+  onRemoveStream: function(stream, type) {
+    if (this._dompc.onremovestream) {
+      try {
+        this._dompc.onremovestream.onCallback({
+          stream: stream, type: type,
+          __exposedProps__: { stream: "r", type: "r" }
+        });
+      } catch(e) {}
+    }
+    this._dompc._executeNext();
+  },
+
+  foundIceCandidate: function(cand) {
+    if (this._dompc.onicecandidate) {
+      try {
+        this._dompc.onicecandidate.onCallback({
+          candidate: cand,
+          __exposedProps__: { candidate: "rw" }
+        });
+      } catch(e) {}
+    }
+    this._dompc._executeNext();
+  }
+};
+
+let NSGetFactory = XPCOMUtils.generateNSGetFactory(
+  [IceCandidate, SessionDescription, PeerConnection]
+);
diff -Naur dom/media/PeerConnection.manifest ../alder/dom/media/PeerConnection.manifest
--- dom/media/PeerConnection.manifest	1969-12-31 16:00:00.000000000 -0800
+++ ../alder/dom/media/PeerConnection.manifest	2012-09-25 18:32:48.000000000 -0700
@@ -0,0 +1,11 @@
+component {7cb2b368-b1ce-4560-acac-8e0dbda7d3d0} PeerConnection.js
+component {8c5dbd70-2c8e-4ecb-a5ad-2fc919099f01} PeerConnection.js
+component {5f21ffd9-b73f-4ba0-a685-56b4667aaf1c} PeerConnection.js
+
+contract @mozilla.org/dom/peerconnection;1 {7cb2b368-b1ce-4560-acac-8e0dbda7d3d0}
+contract @mozilla.org/dom/rtcicecandidate;1 {8c5dbd70-2c8e-4ecb-a5ad-2fc919099f01}
+contract @mozilla.org/dom/rtcsessiondescription;1 {5f21ffd9-b73f-4ba0-a685-56b4667aaf1c}
+
+category JavaScript-global-constructor mozRTCPeerConnection @mozilla.org/dom/peerconnection;1
+category JavaScript-global-constructor mozRTCIceCandidate @mozilla.org/dom/rtcicecandidate;1
+category JavaScript-global-constructor mozRTCSessionDescription @mozilla.org/dom/rtcsessiondescription;1
diff -Naur dom/media/bridge/IPeerConnection.idl ../alder/dom/media/bridge/IPeerConnection.idl
--- dom/media/bridge/IPeerConnection.idl	1969-12-31 16:00:00.000000000 -0800
+++ ../alder/dom/media/bridge/IPeerConnection.idl	2012-09-28 15:47:11.000000000 -0700
@@ -0,0 +1,97 @@
+#include "nsIThread.idl"
+#include "nsIDOMWindow.idl"
+
+interface nsIDOMMediaStream;
+
+/* Do not confuse with nsIDOMRTCPeerConnection. This interface is purely for
+ * communication between the PeerConnection JS DOM binding and the C++
+ * implementation in SIPCC.
+ *
+ * See media/webrtc/signaling/include/PeerConnectionImpl.h
+ */
+[scriptable, uuid(84efc76f-41d9-496a-9444-2965d179d419)]
+interface IPeerConnectionObserver : nsISupports
+{
+  /* Constants */
+  const long kReadyState = 0x1;
+  const long kIceState = 0x2;
+  const long kSdpState = 0x3;
+  const long kSipccState = 0x4;
+
+  /* JSEP callbacks */
+  void onCreateOfferSuccess(in string offer);
+  void onCreateOfferError(in unsigned long code);
+  void onCreateAnswerSuccess(in string answer);
+  void onCreateAnswerError(in unsigned long code);
+  void onSetLocalDescriptionSuccess(in unsigned long code);
+  void onSetRemoteDescriptionSuccess(in unsigned long code);
+  void onSetLocalDescriptionError(in unsigned long code);
+  void onSetRemoteDescriptionError(in unsigned long code);
+
+  /* Notification of one of several types of state changed */
+  void onStateChange(in unsigned long state);
+
+  /* Changes to MediaStreams */
+  void onAddStream(in nsIDOMMediaStream stream, in string type);
+  void onRemoveStream();
+  void onAddTrack();
+  void onRemoveTrack();
+
+  /* When SDP is parsed and a candidate line is found this method is called.
+   * It should hook back into the media transport to notify it of ICE candidates
+   * listed in the SDP PeerConnectionImpl does not parse ICE candidates, just
+   * pulls them out of the SDP.
+   */
+  void foundIceCandidate(in string candidate);
+};
+
+[scriptable, uuid(942366a9-80fe-4cac-ac97-4fbca45bcbff)]
+interface IPeerConnection : nsISupports
+{
+  const unsigned long kHintAudio = 0x00000001;
+  const unsigned long kHintVideo = 0x00000002;
+
+  const long kActionNone = -1;
+  const long kActionOffer = 0;
+  const long kActionAnswer = 1;
+  const long kActionPRAnswer = 2;
+
+  const long kIceGathering = 0;
+  const long kIceWaiting = 1;
+  const long kIceChecking = 2;
+  const long kIceConnected = 3;
+  const long kIceFailed = 4;
+
+  /* Must be called first. Observer events will be dispatched on the thread provided */
+  void initialize(in IPeerConnectionObserver observer, in nsIDOMWindow window,
+                  [optional] in nsIThread thread);
+
+  /* JSEP calls */
+  void createOffer(in string hints);
+  void createAnswer(in string hints, in string offer);
+  void setLocalDescription(in long action, in string sdp);
+  void setRemoteDescription(in long action, in string sdp);
+
+  /* Adds the stream created by GetUserMedia */
+  void addStream(in nsIDOMMediaStream stream);
+  void removeStream(in nsIDOMMediaStream stream);
+  void closeStreams();
+
+  /* As the ICE candidates roll in this one should be called each time
+   * in order to keep the candidate list up-to-date for the next SDP-related
+   * call PeerConnectionImpl does not parse ICE candidates, just sticks them
+   * into the SDP.
+   */
+  void addIceCandidate(in string candidate, in string mid, in unsigned short level);
+
+  /* Puts the SIPCC engine back to 'kIdle', shuts down threads, deletes state */
+  void close();
+
+  /* Attributes */
+  readonly attribute string localDescription;
+  readonly attribute string remoteDescription;
+
+  readonly attribute unsigned long iceState;
+  readonly attribute unsigned long readyState;
+  readonly attribute unsigned long sipccState;
+};
diff -Naur dom/media/bridge/Makefile.in ../alder/dom/media/bridge/Makefile.in
--- dom/media/bridge/Makefile.in	1969-12-31 16:00:00.000000000 -0800
+++ ../alder/dom/media/bridge/Makefile.in	2012-09-28 10:13:13.000000000 -0700
@@ -0,0 +1,37 @@
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+DEPTH   = ../../..
+topsrcdir = @top_srcdir@
+srcdir    = @srcdir@
+VPATH   = @srcdir@
+
+include $(DEPTH)/config/autoconf.mk
+
+MODULE        = peerconnection
+XPIDL_MODULE  = peerconnection
+LIBRARY_NAME  = peerconnection
+MODULE_NAME   = peerconnection
+
+IS_COMPONENT   = 1
+EXPORT_LIBRARY = 1
+LIBXUL_LIBRARY = 1
+
+XPIDLSRCS = IPeerConnection.idl
+
+CPPSRCS = \
+  MediaModule.cpp \
+  $(NULL)
+
+LOCAL_INCLUDES += \
+  -I$(topsrcdir)/media/mtransport \
+  -I$(topsrcdir)/media/webrtc/signaling/include \
+  -I$(topsrcdir)/media/webrtc/signaling/src/sipcc/include \
+  -I$(topsrcdir)/media/webrtc/signaling/src/peerconnection \
+  -I$(topsrcdir)/media/webrtc/signaling/src/mediapipeline \
+  -I$(topsrcdir)/media/webrtc/signaling/src/media-conduit \
+  -I$(topsrcdir)/ipc/chromium/src \
+  $(NULL)
+
+include $(topsrcdir)/config/rules.mk
diff -Naur dom/media/bridge/MediaModule.cpp ../alder/dom/media/bridge/MediaModule.cpp
--- dom/media/bridge/MediaModule.cpp	1969-12-31 16:00:00.000000000 -0800
+++ ../alder/dom/media/bridge/MediaModule.cpp	2012-09-28 10:13:13.000000000 -0700
@@ -0,0 +1,46 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "base/linked_ptr.h"
+
+#include "mozilla/ModuleUtils.h"
+#include "nsIClassInfoImpl.h"
+
+#ifdef MOZ_WEBRTC
+
+#include "PeerConnectionImpl.h"
+
+#define PEERCONNECTION_CID \
+{0xb93af7a1, 0x3411, 0x44a8, {0xbd, 0x0a, 0x8a, 0xf3, 0xdd, 0xe4, 0xd8, 0xd8}}
+
+#define PEERCONNECTION_CONTRACTID "@mozilla.org/peerconnection;1"
+
+namespace sipcc
+{
+// Factory defined in sipcc::, defines sipcc::PeerConnectionImplConstructor
+NS_GENERIC_FACTORY_CONSTRUCTOR(PeerConnectionImpl)
+}
+
+// Defines kPEERCONNECTION_CID
+NS_DEFINE_NAMED_CID(PEERCONNECTION_CID);
+
+static const mozilla::Module::CIDEntry kCIDs[] = {
+  { &kPEERCONNECTION_CID, false, NULL, sipcc::PeerConnectionImplConstructor },
+  { NULL }
+};
+
+static const mozilla::Module::ContractIDEntry kContracts[] = {
+  { PEERCONNECTION_CONTRACTID, &kPEERCONNECTION_CID },
+  { NULL }
+};
+
+static const mozilla::Module kModule = {
+  mozilla::Module::kVersion,
+  kCIDs,
+  kContracts
+};
+
+NSMODULE_DEFN(peerconnection) = &kModule;
+
+#endif
diff -Naur dom/media/nsIDOMMediaStream.idl ../alder/dom/media/nsIDOMMediaStream.idl
--- dom/media/nsIDOMMediaStream.idl	2012-08-06 19:51:31.000000000 -0700
+++ ../alder/dom/media/nsIDOMMediaStream.idl	2012-08-07 16:34:15.000000000 -0700
@@ -4,7 +4,7 @@
  * You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "nsISupports.idl"
- 
+
 [scriptable, builtinclass, uuid(f37c2871-4cb7-4672-bb28-c2d601f7cc9e)]
 interface nsIDOMMediaStream : nsISupports
 {
diff -Naur dom/media/nsIDOMNavigatorUserMedia.idl ../alder/dom/media/nsIDOMNavigatorUserMedia.idl
--- dom/media/nsIDOMNavigatorUserMedia.idl	2012-09-24 12:36:29.000000000 -0700
+++ ../alder/dom/media/nsIDOMNavigatorUserMedia.idl	2012-09-28 15:38:49.000000000 -0700
@@ -35,9 +35,10 @@
   void onError(in DOMString error);
 };
 
-[scriptable, uuid(92a19f9e-9fed-40d1-aeeb-b07fa7f191e8)]
+[scriptable, uuid(36d9c3b7-7594-4035-8a7e-92c2cecdb2c5)]
 interface nsIMediaStreamOptions : nsISupports
 {
+  readonly attribute boolean fake;
   readonly attribute boolean audio;
   readonly attribute boolean video;
   readonly attribute boolean picture;
diff -Naur dom/media/nsIDOMRTCPeerConnection.idl ../alder/dom/media/nsIDOMRTCPeerConnection.idl
--- dom/media/nsIDOMRTCPeerConnection.idl	1969-12-31 16:00:00.000000000 -0800
+++ ../alder/dom/media/nsIDOMRTCPeerConnection.idl	2012-09-28 15:46:15.000000000 -0700
@@ -0,0 +1,87 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "nsISupports.idl"
+#include "nsIDOMMediaStream.idl"
+
+[scriptable, function, uuid(eb9c563c-3b09-4565-9317-eca96ae0c538)]
+interface RTCPeerConnectionCallback : nsISupports
+{
+  void onCallback(in jsval value);
+};
+
+[scriptable, function, uuid(55546efd-287b-4460-8283-0592875b890f)]
+interface RTCPeerConnectionCallbackVoid : nsISupports
+{
+  void onCallback();
+};
+
+[scriptable, uuid(05d7375e-b024-4951-a570-c6642105ad35)]
+interface nsIDOMRTCSessionDescription : nsISupports
+{
+  attribute DOMString sdp;
+  attribute DOMString type;
+};
+
+[scriptable, uuid(df176474-e20a-4f42-a85b-b0414d634cf0)]
+interface nsIDOMRTCIceCandidate : nsISupports
+{
+  attribute DOMString candidate;
+  attribute DOMString sdpMid;
+  attribute unsigned short sdpMLineIndex;
+};
+
+/* See http://dev.w3.org/2011/webrtc/editor/webrtc.html */
+[scriptable, uuid(94628e70-e96f-4170-871c-f993a49f065a)]
+interface nsIDOMRTCPeerConnection : nsISupports
+{
+  void createOffer(in RTCPeerConnectionCallback successCallback,
+    [optional] in RTCPeerConnectionCallback failureCallback,
+    [optional] in jsval constraints);
+
+  void createAnswer(in nsIDOMRTCSessionDescription offer,
+    in RTCPeerConnectionCallback successCallback,
+    [optional] in RTCPeerConnectionCallback failureCallback,
+    [optional] in jsval constraints,
+    [optional] in bool createProvisionalAnswer);
+
+  void setLocalDescription(in nsIDOMRTCSessionDescription desc,
+    [optional] in RTCPeerConnectionCallback successCallback,
+    [optional] in RTCPeerConnectionCallback failureCallback);
+
+  void setRemoteDescription(in nsIDOMRTCSessionDescription desc,
+    [optional] in RTCPeerConnectionCallback successCallback,
+    [optional] in RTCPeerConnectionCallback failureCallback);
+
+  void updateIce([optional] in jsval configuration,
+    [optional] in jsval constraints,
+    [optional] in bool restart);
+
+  void addIceCandidate(in nsIDOMRTCIceCandidate candidate);
+
+  void addStream(in nsIDOMMediaStream stream,
+    [optional] in jsval constraints);
+
+  void removeStream(in nsIDOMMediaStream stream);
+  void close();
+
+  /* Readonly attributes */
+  readonly attribute DOMString iceState;
+  readonly attribute DOMString iceGatheringState;
+
+  readonly attribute DOMString readyState;
+  readonly attribute jsval localDescription;
+  readonly attribute jsval remoteDescription;
+
+  readonly attribute jsval localStreams; // MediaStream[]
+  readonly attribute jsval remoteStreams; // MediaStream[]
+
+  /* Event handlers. TODO: Use real EventTarget */
+  attribute RTCPeerConnectionCallback onaddstream;
+  attribute RTCPeerConnectionCallback onremovestream;
+  attribute RTCPeerConnectionCallback onicecandidate;
+  attribute RTCPeerConnectionCallback onstatechange;
+  attribute RTCPeerConnectionCallback ongatheringchange;
+  attribute RTCPeerConnectionCallback onicechange;
+};
