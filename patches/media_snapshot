# HG changeset patch
# Parent 201950397f3a31bec093c8293374b8c4a77d672e
# User Doug Turner <dougt@dougt.org>
# Date 1338485284 25200
# Node ID 2f5066c1c57362bd5c6f68e68b77e130e373f0b8
try: -b do -p all -u all -t all

diff --git a/content/media/MediaEngineDefault.cpp b/content/media/MediaEngineDefault.cpp
--- a/content/media/MediaEngineDefault.cpp
+++ b/content/media/MediaEngineDefault.cpp
@@ -1,13 +1,19 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this file,
  * You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "MediaEngineDefault.h"
+#include "nsDOMFile.h"
+
+#ifdef ANDROID
+#include "AndroidBridge.h"
+#include "nsISupportsUtils.h"
+#endif
 
 #define WIDTH 320
 #define HEIGHT 240
 #define FPS 10
 #define CHANNELS 1
 #define RATE USECS_PER_S
 
 namespace mozilla {
@@ -74,26 +80,26 @@ MediaEngineDefaultVideoSource::Start(Sou
     return NS_ERROR_FAILURE;
   }
 
   mSource = aStream;
 
   // Allocate a single blank Image
   layers::Image::Format format = layers::Image::PLANAR_YCBCR;
   mImageContainer = layers::LayerManager::CreateImageContainer();
-    
+
   nsRefPtr<layers::Image> image = mImageContainer->CreateImage(&format, 1);
-  
+
   int len = ((WIDTH * HEIGHT) * 3 / 2);
   mImage = static_cast<layers::PlanarYCbCrImage*>(image.get());
   PRUint8* frame = (PRUint8*) PR_Malloc(len);
   memset(frame, 0x80, len); // Gray
 
   const PRUint8 lumaBpp = 8;
-  const PRUint8 chromaBpp = 4; 
+  const PRUint8 chromaBpp = 4;
 
   layers::PlanarYCbCrImage::Data data;
   data.mYChannel = frame;
   data.mYSize = gfxIntSize(WIDTH, HEIGHT);
   data.mYStride = WIDTH * lumaBpp / 8.0;
   data.mCbCrStride = WIDTH * chromaBpp / 8.0;
   data.mCbChannel = frame + HEIGHT * data.mYStride;
   data.mCrChannel = data.mCbChannel + HEIGHT * data.mCbCrStride / 2;
@@ -117,17 +123,17 @@ MediaEngineDefaultVideoSource::Start(Sou
   mSource->AdvanceKnownTracksTime(STREAM_TIME_MAX);
 
   // Remember TrackID so we can end it later
   mTrackID = aID;
 
   // Start timer for subsequent frames
   mTimer->InitWithCallback(this, 1000 / FPS, nsITimer::TYPE_REPEATING_SLACK);
   mState = kStarted;
-  
+
   return NS_OK;
 }
 
 nsresult
 MediaEngineDefaultVideoSource::Stop()
 {
   if (mState != kStarted) {
     return NS_ERROR_FAILURE;
@@ -144,18 +150,37 @@ MediaEngineDefaultVideoSource::Stop()
 
   mState = kStopped;
   return NS_OK;
 }
 
 nsresult
 MediaEngineDefaultVideoSource::Snapshot(PRUint32 aDuration, nsIDOMFile** aFile)
 {
-   *aFile = nsnull;
-   return NS_ERROR_NOT_IMPLEMENTED;
+  *aFile = nsnull;
+
+#ifndef MOZ_WIDGET_ANDROID
+  return NS_ERROR_NOT_IMPLEMENTED;
+#else
+  if (!AndroidBridge::Bridge()) {
+    return NS_ERROR_UNEXPECTED;
+  }
+
+  nsAutoString filePath;
+  AndroidBridge::Bridge()->ShowFilePickerForMimeType(filePath, NS_LITERAL_STRING("image/*"));
+
+  nsCOMPtr<nsILocalFile> localFile;
+  nsresult rv = NS_NewLocalFile(filePath, false, getter_AddRefs(localFile));
+  if (NS_FAILED(rv)) {
+    return rv;
+  }
+
+  NS_ADDREF(*aFile = new nsDOMFileFile(localFile));
+  return NS_OK;
+#endif
 }
 
 NS_IMETHODIMP
 MediaEngineDefaultVideoSource::Notify(nsITimer* aTimer)
 {
   VideoSegment segment;
 
   nsRefPtr<layers::PlanarYCbCrImage> image = mImage;
@@ -191,17 +216,17 @@ MediaEngineDefaultAudioSource::Allocate(
   }
   mState = kAllocated;
   return nsDOMMediaStream::CreateInputStream();
 }
 
 nsresult
 MediaEngineDefaultAudioSource::Deallocate()
 {
-  if (mState != kStopped && mState != kAllocated) {
+  if (mState != kAllocated) {
     return NS_ERROR_FAILURE;
   }
   mState = kReleased;
   return NS_OK;
 }
 
 nsresult
 MediaEngineDefaultAudioSource::Start(SourceMediaStream* aStream, TrackID aID)
diff --git a/dom/media/MediaManager.cpp b/dom/media/MediaManager.cpp
--- a/dom/media/MediaManager.cpp
+++ b/dom/media/MediaManager.cpp
@@ -242,16 +242,18 @@ public:
         mErrorCallback, NS_LITERAL_STRING("HARDWARE_UNAVAILABLE")
       ));
       return NS_ERROR_FAILURE;
     }
 
     nsCOMPtr<nsIDOMFile> file;
     mSource->Snapshot(mDuration, getter_AddRefs(file));
 
+    mSource->Deallocate();
+
     NS_DispatchToMainThread(new SuccessCallbackRunnable(
       mWindow, mSuccessCallback, file
     ));
     return NS_OK;
   }
 
 private:
   nsCOMPtr<nsIDOMWindow> mWindow;
