# HG changeset patch
# Parent 7351685c0da062100238f5cbbccf5eabe25ee619
# User Anant Narayanan <anant@kix.in>
DOM bindings for gUM

diff --git a/content/media/Makefile.in b/content/media/Makefile.in
--- a/content/media/Makefile.in
+++ b/content/media/Makefile.in
@@ -12,11 +12,6 @@
 MODULE = content
 LIBRARY_NAME = gkconmedia_s
 LIBXUL_LIBRARY = 1
-XPIDL_MODULE = content_media
-
-XPIDLSRCS = \
-  nsIDOMMediaStream.idl \
-  $(NULL)
 
 EXPORTS = \
   AudioSegment.h \
diff --git a/dom/Makefile.in b/dom/Makefile.in
--- a/dom/Makefile.in
+++ b/dom/Makefile.in
@@ -50,6 +50,7 @@
   battery \
   contacts \
   devicestorage \
+  media \
   power \
   settings \
   sms \
diff --git a/dom/base/Navigator.cpp b/dom/base/Navigator.cpp
--- a/dom/base/Navigator.cpp
+++ b/dom/base/Navigator.cpp
@@ -31,6 +31,7 @@
 #include "nsIDOMWakeLock.h"
 #include "nsIPowerManagerService.h"
 #include "SmsManager.h"
+#include "MediaManager.h"
 #include "nsISmsService.h"
 #include "mozilla/Hal.h"
 #include "nsIWebNavigation.h"
@@ -92,6 +93,7 @@
   NS_INTERFACE_MAP_ENTRY(nsIDOMClientInformation)
   NS_INTERFACE_MAP_ENTRY(nsIDOMNavigatorDeviceStorage)
   NS_INTERFACE_MAP_ENTRY(nsIDOMNavigatorGeolocation)
+  NS_INTERFACE_MAP_ENTRY(nsIDOMNavigatorUserMedia)
   NS_INTERFACE_MAP_ENTRY(nsIDOMMozNavigatorBattery)
   NS_INTERFACE_MAP_ENTRY(nsIDOMNavigatorDesktopNotification)
   NS_INTERFACE_MAP_ENTRY(nsIDOMMozNavigatorSms)
@@ -900,6 +902,27 @@
 }
 
 //*****************************************************************************
+//    Navigator::nsIDOMNavigatorUserMedia (mozGetUserMedia)
+//*****************************************************************************
+
+NS_IMETHODIMP
+Navigator::MozGetUserMedia(nsIMediaStreamOptions *aParams,
+    nsIDOMGetUserMediaSuccessCallback* onSuccess,
+    nsIDOMGetUserMediaErrorCallback* onError)
+{
+  if (!Preferences::GetBool("media.enabled", true)) {
+    return NS_OK;
+  }
+
+  // Should pass a window reference to MediaManager::Init() eventually
+  if (!mMediaManager) {
+    mMediaManager = new media::MediaManager();
+  }
+
+  return mMediaManager->GetUserMedia(aParams, onSuccess, onError);
+}
+
+//*****************************************************************************
 //    Navigator::nsIDOMNavigatorDesktopNotification
 //*****************************************************************************
 
diff --git a/dom/base/Navigator.h b/dom/base/Navigator.h
--- a/dom/base/Navigator.h
+++ b/dom/base/Navigator.h
@@ -9,6 +9,7 @@
 
 #include "nsIDOMNavigator.h"
 #include "nsIDOMNavigatorGeolocation.h"
+#include "nsIDOMNavigatorUserMedia.h"
 #include "nsIDOMNavigatorDeviceStorage.h"
 #include "nsIDOMNavigatorDesktopNotification.h"
 #include "nsIDOMClientInformation.h"
@@ -49,6 +50,10 @@
 class SmsManager;
 } // namespace sms
 
+namespace media {
+class MediaManager;
+} // namespace media
+
 namespace network {
 class Connection;
 class MobileConnection;
@@ -60,6 +65,7 @@
 
 class Navigator : public nsIDOMNavigator
                 , public nsIDOMClientInformation
+                , public nsIDOMNavigatorUserMedia
                 , public nsIDOMNavigatorDeviceStorage
                 , public nsIDOMNavigatorGeolocation
                 , public nsIDOMNavigatorDesktopNotification
@@ -82,6 +88,7 @@
   NS_DECL_NSIDOMCLIENTINFORMATION
   NS_DECL_NSIDOMNAVIGATORDEVICESTORAGE
   NS_DECL_NSIDOMNAVIGATORGEOLOCATION
+  NS_DECL_NSIDOMNAVIGATORUSERMEDIA
   NS_DECL_NSIDOMNAVIGATORDESKTOPNOTIFICATION
   NS_DECL_NSIDOMMOZNAVIGATORBATTERY
   NS_DECL_NSIDOMMOZNAVIGATORSMS
@@ -121,6 +128,7 @@
   nsRefPtr<battery::BatteryManager> mBatteryManager;
   nsRefPtr<power::PowerManager> mPowerManager;
   nsRefPtr<sms::SmsManager> mSmsManager;
+  nsRefPtr<media::MediaManager> mMediaManager;
 #ifdef MOZ_B2G_RIL
   nsCOMPtr<nsIDOMTelephony> mTelephony;
 #endif
diff --git a/dom/base/nsDOMClassInfo.cpp b/dom/base/nsDOMClassInfo.cpp
--- a/dom/base/nsDOMClassInfo.cpp
+++ b/dom/base/nsDOMClassInfo.cpp
@@ -427,6 +427,9 @@
 #include "nsIDOMGeoPositionCoords.h"
 #include "nsIDOMGeoPositionError.h"
 
+// User media
+#include "nsIDOMNavigatorUserMedia.h"
+
 // Workers
 #include "mozilla/dom/workers/Workers.h"
 
@@ -2447,6 +2450,7 @@
     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNavigator)
     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNavigatorDeviceStorage)
     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNavigatorGeolocation)
+    DOM_CLASSINFO_MAP_ENTRY(nsIDOMNavigatorUserMedia)
     DOM_CLASSINFO_MAP_CONDITIONAL_ENTRY(nsIDOMNavigatorDesktopNotification,
                                         Navigator::HasDesktopNotificationSupport())
     DOM_CLASSINFO_MAP_ENTRY(nsIDOMClientInformation)
diff --git a/dom/media/Makefile.in b/dom/media/Makefile.in
new file mode 100644
--- /dev/null
+++ b/dom/media/Makefile.in
@@ -0,0 +1,16 @@
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this file,
+# You can obtain one at http://mozilla.org/MPL/2.0/.
+
+DEPTH            = ../..
+topsrcdir        = @top_srcdir@
+srcdir           = @srcdir@
+VPATH            = @srcdir@
+
+relativesrcdir   = dom/media
+
+include $(DEPTH)/config/autoconf.mk
+
+PARALLEL_DIRS = interfaces src
+
+include $(topsrcdir)/config/rules.mk
diff --git a/dom/media/interfaces/Makefile.in b/dom/media/interfaces/Makefile.in
new file mode 100644
--- /dev/null
+++ b/dom/media/interfaces/Makefile.in
@@ -0,0 +1,21 @@
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this file,
+# You can obtain one at http://mozilla.org/MPL/2.0/.
+
+DEPTH            = ../../..
+topsrcdir        = @top_srcdir@
+srcdir           = @srcdir@
+VPATH            = @srcdir@
+
+include $(DEPTH)/config/autoconf.mk
+
+XPIDL_MODULE = dom_media
+
+include $(topsrcdir)/dom/dom-config.mk
+
+XPIDLSRCS = \
+  nsIDOMMediaStream.idl \
+  nsIDOMNavigatorUserMedia.idl \
+  $(NULL)
+
+include $(topsrcdir)/config/rules.mk
diff --git a/content/media/nsIDOMMediaStream.idl b/dom/media/interfaces/nsIDOMMediaStream.idl
rename from content/media/nsIDOMMediaStream.idl
rename to dom/media/interfaces/nsIDOMMediaStream.idl
diff --git a/dom/media/interfaces/nsIDOMNavigatorUserMedia.idl b/dom/media/interfaces/nsIDOMNavigatorUserMedia.idl
new file mode 100644
--- /dev/null
+++ b/dom/media/interfaces/nsIDOMNavigatorUserMedia.idl
@@ -0,0 +1,40 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "nsISupports.idl"
+#include "nsIDOMMediaStream.idl"
+
+[scriptable, function, uuid(f2a144fc-3534-4761-8c5d-989ae720f89a)]
+interface nsIDOMGetUserMediaSuccessCallback : nsISupports
+{
+  /* value should be a nsIDOMBlob is picture is true,
+   * and a nsIDOMMediaStream if either audio or video are true.
+   */
+  void onSuccess(in nsIDOMMediaStream value);
+};
+
+[scriptable, function, uuid(2614bbcf-85cc-43e5-8740-964f52bdc7ca)]
+interface nsIDOMGetUserMediaErrorCallback : nsISupports
+{
+  void onError(in DOMString error);
+};
+
+[scriptable, uuid(8a26205e-e8f7-4372-bd15-97ff982b4c1c)]
+interface nsIMediaStreamOptions : nsISupports
+{
+  readonly attribute boolean audio;
+  readonly attribute boolean video;
+  readonly attribute boolean picture;
+  readonly attribute DOMString camera;
+};
+
+[scriptable, uuid(381e0071-0be5-4f6b-ae21-8e3407a37faa)]
+interface nsIDOMNavigatorUserMedia : nsISupports
+{
+  void mozGetUserMedia(
+    in nsIMediaStreamOptions params,
+    in nsIDOMGetUserMediaSuccessCallback onsuccess,
+    in nsIDOMGetUserMediaErrorCallback onerror
+  );
+};
\ No newline at end of file
diff --git a/dom/media/src/Makefile.in b/dom/media/src/Makefile.in
new file mode 100644
--- /dev/null
+++ b/dom/media/src/Makefile.in
@@ -0,0 +1,32 @@
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this file,
+# You can obtain one at http://mozilla.org/MPL/2.0/.
+
+DEPTH            = ../../..
+topsrcdir        = @top_srcdir@
+srcdir           = @srcdir@
+VPATH            = @srcdir@
+
+include $(DEPTH)/config/autoconf.mk
+
+MODULE           = dom
+LIBRARY_NAME     = dom_media_s
+LIBXUL_LIBRARY   = 1
+FORCE_STATIC_LIB = 1
+
+include $(topsrcdir)/dom/dom-config.mk
+
+EXPORTS = \
+  MediaManager.h \
+  $(NULL)
+
+CPPSRCS = \
+  MediaManager.cpp \
+  $(NULL)
+
+LOCAL_INCLUDES = \
+  -I$(topsrcdir)/dom/base \
+  $(NULL)
+
+include $(topsrcdir)/config/config.mk
+include $(topsrcdir)/config/rules.mk
diff --git a/dom/media/src/MediaManager.cpp b/dom/media/src/MediaManager.cpp
new file mode 100644
--- /dev/null
+++ b/dom/media/src/MediaManager.cpp
@@ -0,0 +1,215 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "MediaManager.h"
+
+namespace mozilla {
+namespace dom {
+namespace media {
+
+class ErrorCallbackRunnable : public nsRunnable {
+public:
+  ErrorCallbackRunnable(
+    nsIDOMGetUserMediaErrorCallback *aError, const nsString& aErrorMsg) :
+    mError(aError), mErrorMsg(aErrorMsg) {}
+
+  NS_IMETHOD Run() {
+    mError->OnError(mErrorMsg);
+    return NS_OK;
+  }
+
+private:
+  nsCOMPtr<nsIDOMGetUserMediaErrorCallback> mError;
+  const nsString mErrorMsg;
+};
+
+class SuccessCallbackRunnable : public nsRunnable {
+public:
+  SuccessCallbackRunnable(
+    nsIDOMGetUserMediaSuccessCallback *aSuccess, nsIDOMMediaStream *audioStream) :
+    mSuccess(aSuccess), mStream(audioStream) {}
+
+  NS_IMETHOD Run() {
+    mSuccess->OnSuccess(mStream);
+    return NS_OK;
+  }
+
+private:
+  nsCOMPtr<nsIDOMGetUserMediaSuccessCallback> mSuccess;
+  nsCOMPtr<nsIDOMMediaStream> mStream;
+};
+
+/**
+ * This runnable creates a nsDOMMediaStream from a given MediaEngineSource
+ * and returns it via a success callback. Both must be done on the main thread.
+ */
+class GetUserMediaCallbackRunable : public nsRunnable {
+public:
+  GetUserMediaCallbackRunable(
+    MediaEngineSource *aSource, TrackID aId, nsIDOMGetUserMediaSuccessCallback *aCallback) :
+    mSource(aSource), mId(aId), mCallback(aCallback) {}
+
+  NS_IMETHOD Run() {
+    // Normally we would now get the name & UUID for the device and ask the
+    // user permission. We will do that when we have some UI.
+    nsCOMPtr<nsDOMMediaStream> comStream = mSource->Allocate();
+    nsDOMMediaStream* stream = comStream.get();
+
+    // Call Start() too because we don't have a NotifyStartConsuming callback
+    // from the MediaStream yet. FIXME: Change this when do, add failure case
+    nsRefPtr<SourceMediaStream> sStream = stream->GetStream()->AsSourceStream();
+    nsresult rv = mSource->Start(sStream.get(), mId);
+    NS_ENSURE_SUCCESS(rv, rv);
+
+    NS_DispatchToMainThread(new SuccessCallbackRunnable(mCallback, stream));
+    return NS_OK;
+  }
+
+private:
+  nsCOMPtr<MediaEngineSource> mSource;
+  TrackID mId;
+  nsCOMPtr<nsIDOMGetUserMediaSuccessCallback> mCallback;
+};
+
+class GetUserMediaRunnable : public nsRunnable {
+public:
+  GetUserMediaRunnable(bool audio, bool video, bool picture,
+    MediaManager* manager,
+    nsIDOMGetUserMediaSuccessCallback* onSuccess,
+    nsIDOMGetUserMediaErrorCallback* onError) {
+
+    mAudio = audio;
+    mVideo = video;
+    mPicture = picture; 
+
+    mManager = manager;
+    mSuccess = onSuccess;
+    mError = onError;
+  }
+
+  NS_IMETHOD Run() {
+    if (mPicture) {
+      NS_DispatchToMainThread(new ErrorCallbackRunnable(
+        mError, NS_LITERAL_STRING("NOT_IMPLEMENTED")
+      ));
+      return NS_OK;
+    }
+
+    // FIXME: Implementing merging two streams (See bug 758391).
+    if (mAudio && mVideo) {
+      NS_DispatchToMainThread(new ErrorCallbackRunnable(
+        mError, NS_LITERAL_STRING("NOT_IMPLEMENTED")
+      ));
+      return NS_OK;
+    }
+
+    // We only support 1 audio and 1 video track for now
+    enum {
+      kVideoTrack = 1,
+      kAudioTrack = 2
+    };
+
+    nsTArray<nsRefPtr<mozilla::MediaEngineVideoSource> > videoSources;
+    nsTArray<nsRefPtr<mozilla::MediaEngineAudioSource> > audioSources;
+    mozilla::MediaEngine* mBackend = mManager->GetBackend();  
+
+    if (mVideo) {
+      // Pick the last device in the list for now
+      mBackend->EnumerateVideoDevices(&videoSources);
+
+      PRInt32 count = videoSources.Length();
+      if (!count) {
+        NS_DispatchToMainThread(new ErrorCallbackRunnable(
+          mError, NS_LITERAL_STRING("NO_DEVICES_FOUND")
+        ));
+        return NS_OK;
+      }
+
+      mozilla::MediaEngineVideoSource* videoSource = videoSources[count - 1];
+      NS_DispatchToMainThread(
+        new GetUserMediaCallbackRunable(videoSource, kVideoTrack, mSuccess)
+      );
+      return NS_OK;
+    }
+
+    if (mAudio) {
+      // Same as above for audio
+      mBackend->EnumerateAudioDevices(&audioSources);
+
+      PRInt32 count = audioSources.Length();
+      if (!count) {
+        NS_DispatchToMainThread(new ErrorCallbackRunnable(
+          mError, NS_LITERAL_STRING("NO_DEVICES_FOUND")
+        ));
+        return NS_OK;
+      }
+
+      mozilla::MediaEngineAudioSource* audioSource = audioSources[count - 1];
+      NS_DispatchToMainThread(
+        new GetUserMediaCallbackRunable(audioSource, kAudioTrack, mSuccess)
+      );
+      return NS_OK;
+    }
+
+    return NS_OK;
+  }
+
+private:
+  bool mAudio;
+  bool mVideo;
+  bool mPicture;
+
+  nsRefPtr<MediaManager> mManager;
+
+  nsCOMPtr<nsIDOMGetUserMediaSuccessCallback> mSuccess;
+  nsCOMPtr<nsIDOMGetUserMediaErrorCallback> mError;
+};
+
+
+NS_IMPL_ISUPPORTS0(MediaManager)
+
+mozilla::MediaEngine*
+MediaManager::GetBackend() {
+  // Replace with real backends as we add platform support
+  if (!mBackend) {
+    mBackend = new mozilla::MediaEngineDefault();
+  }
+  return mBackend;
+}
+
+nsresult
+MediaManager::GetUserMedia(nsIMediaStreamOptions *aParams,
+  nsIDOMGetUserMediaSuccessCallback* onSuccess,
+  nsIDOMGetUserMediaErrorCallback* onError)
+{
+  NS_ENSURE_TRUE(aParams, NS_ERROR_NULL_POINTER);
+  
+  bool audio, video, picture;
+  nsresult rv = aParams->GetPicture(&picture);
+  NS_ENSURE_SUCCESS(rv, rv);
+  rv = aParams->GetAudio(&audio);
+  NS_ENSURE_SUCCESS(rv, rv);
+  rv = aParams->GetVideo(&video);
+  NS_ENSURE_SUCCESS(rv, rv);
+
+  // We only support "front" or "back". TBD: Send to GetUserMediaRunnable.
+  nsString cameraType;
+  rv = aParams->GetCamera(cameraType);
+  NS_ENSURE_SUCCESS(rv, rv);
+  
+  nsCOMPtr<nsIRunnable> gUMRunnable = new GetUserMediaRunnable(
+    audio, video, picture, this, onSuccess, onError
+  );
+  NS_ENSURE_TRUE(gUMRunnable, NS_ERROR_OUT_OF_MEMORY);
+
+  nsCOMPtr<nsIThread> gUMThread;
+  rv = NS_NewThread(getter_AddRefs(gUMThread), gUMRunnable);
+  NS_ENSURE_SUCCESS(rv, rv);
+
+  return NS_OK;
+}
+
+}
+}
+}
diff --git a/dom/media/src/MediaManager.h b/dom/media/src/MediaManager.h
new file mode 100644
--- /dev/null
+++ b/dom/media/src/MediaManager.h
@@ -0,0 +1,31 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "Navigator.h"
+#include "MediaStreamGraph.h"
+#include "MediaEngineDefault.h"
+
+namespace mozilla {
+namespace dom {
+namespace media {
+
+class MediaManager : public nsISupports {
+public:
+  MediaManager() : mBackend(nsnull) {};
+  ~MediaManager() { delete mBackend; };
+
+  NS_DECL_ISUPPORTS
+
+  mozilla::MediaEngine* GetBackend();
+  nsresult GetUserMedia(nsIMediaStreamOptions *aParams,
+    nsIDOMGetUserMediaSuccessCallback* onSuccess,
+    nsIDOMGetUserMediaErrorCallback* onError);
+
+private:
+  mozilla::MediaEngine* mBackend;
+};
+
+}
+}
+}
\ No newline at end of file
diff --git a/layout/build/Makefile.in b/layout/build/Makefile.in
--- a/layout/build/Makefile.in
+++ b/layout/build/Makefile.in
@@ -66,6 +66,7 @@
 	$(DEPTH)/dom/power/$(LIB_PREFIX)dom_power_s.$(LIB_SUFFIX) \
 	$(DEPTH)/dom/settings/$(LIB_PREFIX)jsdomsettings_s.$(LIB_SUFFIX) \
 	$(DEPTH)/dom/network/src/$(LIB_PREFIX)dom_network_s.$(LIB_SUFFIX) \
+	$(DEPTH)/dom/media/src/$(LIB_PREFIX)dom_media_s.$(LIB_SUFFIX) \
 	$(DEPTH)/dom/sms/src/$(LIB_PREFIX)dom_sms_s.$(LIB_SUFFIX) \
 	$(DEPTH)/dom/src/events/$(LIB_PREFIX)jsdomevents_s.$(LIB_SUFFIX) \
 	$(DEPTH)/dom/src/json/$(LIB_PREFIX)json_s.$(LIB_SUFFIX) \
