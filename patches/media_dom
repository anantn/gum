# HG changeset patch
# Parent 0cc234cde88f17b8664f2b2e91784f987ebaed64
# User Anant Narayanan <anant@kix.in>
DOM bindings for gUM

diff --git a/b2g/installer/package-manifest.in b/b2g/installer/package-manifest.in
--- a/b2g/installer/package-manifest.in
+++ b/b2g/installer/package-manifest.in
@@ -162,16 +162,17 @@
 #endif
 @BINPATH@/components/dom_canvas.xpt
 @BINPATH@/components/dom_contacts.xpt
 @BINPATH@/components/dom_core.xpt
 @BINPATH@/components/dom_css.xpt
 @BINPATH@/components/dom_devicestorage.xpt
 @BINPATH@/components/dom_events.xpt
 @BINPATH@/components/dom_geolocation.xpt
+@BINPATH@/components/dom_media.xpt
 @BINPATH@/components/dom_network.xpt
 @BINPATH@/components/dom_notification.xpt
 @BINPATH@/components/dom_html.xpt
 @BINPATH@/components/dom_indexeddb.xpt
 @BINPATH@/components/dom_offline.xpt
 @BINPATH@/components/dom_json.xpt
 @BINPATH@/components/dom_power.xpt
 @BINPATH@/components/dom_range.xpt
diff --git a/browser/installer/package-manifest.in b/browser/installer/package-manifest.in
--- a/browser/installer/package-manifest.in
+++ b/browser/installer/package-manifest.in
@@ -167,16 +167,17 @@
 #endif
 @BINPATH@/components/dom_canvas.xpt
 @BINPATH@/components/dom_contacts.xpt
 @BINPATH@/components/dom_core.xpt
 @BINPATH@/components/dom_css.xpt
 @BINPATH@/components/dom_devicestorage.xpt
 @BINPATH@/components/dom_events.xpt
 @BINPATH@/components/dom_geolocation.xpt
+@BINPATH@/components/dom_media.xpt
 @BINPATH@/components/dom_network.xpt
 @BINPATH@/components/dom_notification.xpt
 @BINPATH@/components/dom_html.xpt
 @BINPATH@/components/dom_indexeddb.xpt
 @BINPATH@/components/dom_offline.xpt
 @BINPATH@/components/dom_json.xpt
 @BINPATH@/components/dom_power.xpt
 @BINPATH@/components/dom_range.xpt
diff --git a/content/media/Makefile.in b/content/media/Makefile.in
--- a/content/media/Makefile.in
+++ b/content/media/Makefile.in
@@ -7,21 +7,16 @@ topsrcdir = @top_srcdir@
 srcdir    = @srcdir@
 VPATH     = @srcdir@
 
 include $(DEPTH)/config/autoconf.mk
 
 MODULE = content
 LIBRARY_NAME = gkconmedia_s
 LIBXUL_LIBRARY = 1
-XPIDL_MODULE = content_media
-
-XPIDLSRCS = \
-  nsIDOMMediaStream.idl \
-  $(NULL)
 
 EXPORTS = \
   AudioSegment.h \
   FileBlockCache.h \
   MediaEngine.h \
   MediaEngineDefault.h \
   MediaResource.h \
   MediaSegment.h \
diff --git a/dom/Makefile.in b/dom/Makefile.in
--- a/dom/Makefile.in
+++ b/dom/Makefile.in
@@ -45,16 +45,17 @@ DIRS += \
 
 DIRS += \
   apps \
   base \
   bindings \
   battery \
   contacts \
   devicestorage \
+  media \
   power \
   settings \
   sms \
   src \
   locales \
   network \
   plugins/base \
   plugins/ipc \
diff --git a/dom/base/Navigator.cpp b/dom/base/Navigator.cpp
--- a/dom/base/Navigator.cpp
+++ b/dom/base/Navigator.cpp
@@ -26,16 +26,17 @@
 #include "nsUnicharUtils.h"
 #include "mozilla/Preferences.h"
 #include "mozilla/Telemetry.h"
 #include "BatteryManager.h"
 #include "PowerManager.h"
 #include "nsIDOMWakeLock.h"
 #include "nsIPowerManagerService.h"
 #include "SmsManager.h"
+#include "MediaManager.h"
 #include "nsISmsService.h"
 #include "mozilla/Hal.h"
 #include "nsIWebNavigation.h"
 #include "mozilla/ClearOnShutdown.h"
 #include "Connection.h"
 #include "MobileConnection.h"
 
 #ifdef MOZ_B2G_RIL
@@ -87,16 +88,17 @@ Navigator::~Navigator()
 }
 
 NS_INTERFACE_MAP_BEGIN(Navigator)
   NS_INTERFACE_MAP_ENTRY_AMBIGUOUS(nsISupports, nsIDOMNavigator)
   NS_INTERFACE_MAP_ENTRY(nsIDOMNavigator)
   NS_INTERFACE_MAP_ENTRY(nsIDOMClientInformation)
   NS_INTERFACE_MAP_ENTRY(nsIDOMNavigatorDeviceStorage)
   NS_INTERFACE_MAP_ENTRY(nsIDOMNavigatorGeolocation)
+  NS_INTERFACE_MAP_ENTRY(nsIDOMNavigatorUserMedia)
   NS_INTERFACE_MAP_ENTRY(nsIDOMMozNavigatorBattery)
   NS_INTERFACE_MAP_ENTRY(nsIDOMNavigatorDesktopNotification)
   NS_INTERFACE_MAP_ENTRY(nsIDOMMozNavigatorSms)
 #ifdef MOZ_B2G_RIL
   NS_INTERFACE_MAP_ENTRY(nsIDOMNavigatorTelephony)
 #endif
   NS_INTERFACE_MAP_ENTRY(nsIDOMMozNavigatorNetwork)
 #ifdef MOZ_B2G_BT
@@ -895,16 +897,42 @@ NS_IMETHODIMP Navigator::GetGeolocation(
     return NS_ERROR_FAILURE;
   }
 
   NS_ADDREF(*_retval = mGeolocation);
   return NS_OK;
 }
 
 //*****************************************************************************
+//    Navigator::nsIDOMNavigatorUserMedia (mozGetUserMedia)
+//*****************************************************************************
+
+NS_IMETHODIMP
+Navigator::MozGetUserMedia(nsIMediaStreamOptions* aParams,
+                           nsIDOMGetUserMediaSuccessCallback* onSuccess,
+                           nsIDOMGetUserMediaErrorCallback* onError)
+{
+  if (!Preferences::GetBool("media.enabled", false)) {
+    return NS_OK;
+  }
+
+  // Should pass a window reference to MediaManager::Init() eventually
+  if (!mMediaManager) {
+    mMediaManager = new media::MediaManager();
+  }
+
+  nsCOMPtr<nsPIDOMWindow> win(do_QueryReferent(mWindow));
+
+  if (!win || !win->GetOuterWindow() || !win->GetDocShell()) {
+    return NS_ERROR_FAILURE;
+  }
+  return mMediaManager->GetUserMedia(win->GetOuterWindow(), aParams, onSuccess, onError);
+}
+
+//*****************************************************************************
 //    Navigator::nsIDOMNavigatorDesktopNotification
 //*****************************************************************************
 
 NS_IMETHODIMP Navigator::GetMozNotification(nsIDOMDesktopNotificationCenter** aRetVal)
 {
   NS_ENSURE_ARG_POINTER(aRetVal);
   *aRetVal = nsnull;
 
diff --git a/dom/base/Navigator.h b/dom/base/Navigator.h
--- a/dom/base/Navigator.h
+++ b/dom/base/Navigator.h
@@ -4,16 +4,17 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #ifndef mozilla_dom_Navigator_h
 #define mozilla_dom_Navigator_h
 
 #include "nsIDOMNavigator.h"
 #include "nsIDOMNavigatorGeolocation.h"
+#include "nsIDOMNavigatorUserMedia.h"
 #include "nsIDOMNavigatorDeviceStorage.h"
 #include "nsIDOMNavigatorDesktopNotification.h"
 #include "nsIDOMClientInformation.h"
 #include "nsIDOMNavigatorBattery.h"
 #include "nsIDOMNavigatorSms.h"
 #include "nsIDOMNavigatorNetwork.h"
 #include "nsAutoPtr.h"
 #include "nsWeakReference.h"
@@ -44,27 +45,32 @@ namespace dom {
 namespace battery {
 class BatteryManager;
 } // namespace battery
 
 namespace sms {
 class SmsManager;
 } // namespace sms
 
+namespace media {
+class MediaManager;
+} // namespace media
+
 namespace network {
 class Connection;
 class MobileConnection;
 } // namespace Connection;
 
 namespace power {
 class PowerManager;
 } // namespace power
 
 class Navigator : public nsIDOMNavigator
                 , public nsIDOMClientInformation
+                , public nsIDOMNavigatorUserMedia
                 , public nsIDOMNavigatorDeviceStorage
                 , public nsIDOMNavigatorGeolocation
                 , public nsIDOMNavigatorDesktopNotification
                 , public nsIDOMMozNavigatorBattery
                 , public nsIDOMMozNavigatorSms
 #ifdef MOZ_B2G_RIL
                 , public nsIDOMNavigatorTelephony
 #endif
@@ -77,16 +83,17 @@ public:
   Navigator(nsPIDOMWindow *aInnerWindow);
   virtual ~Navigator();
 
   NS_DECL_ISUPPORTS
   NS_DECL_NSIDOMNAVIGATOR
   NS_DECL_NSIDOMCLIENTINFORMATION
   NS_DECL_NSIDOMNAVIGATORDEVICESTORAGE
   NS_DECL_NSIDOMNAVIGATORGEOLOCATION
+  NS_DECL_NSIDOMNAVIGATORUSERMEDIA
   NS_DECL_NSIDOMNAVIGATORDESKTOPNOTIFICATION
   NS_DECL_NSIDOMMOZNAVIGATORBATTERY
   NS_DECL_NSIDOMMOZNAVIGATORSMS
 #ifdef MOZ_B2G_RIL
   NS_DECL_NSIDOMNAVIGATORTELEPHONY
 #endif
   NS_DECL_NSIDOMMOZNAVIGATORNETWORK
 
@@ -116,16 +123,17 @@ private:
 
   nsRefPtr<nsMimeTypeArray> mMimeTypes;
   nsRefPtr<nsPluginArray> mPlugins;
   nsRefPtr<nsGeolocation> mGeolocation;
   nsRefPtr<nsDesktopNotificationCenter> mNotification;
   nsRefPtr<battery::BatteryManager> mBatteryManager;
   nsRefPtr<power::PowerManager> mPowerManager;
   nsRefPtr<sms::SmsManager> mSmsManager;
+  nsRefPtr<media::MediaManager> mMediaManager;
 #ifdef MOZ_B2G_RIL
   nsCOMPtr<nsIDOMTelephony> mTelephony;
 #endif
   nsRefPtr<network::Connection> mConnection;
   nsRefPtr<network::MobileConnection> mMobileConnection;
 #ifdef MOZ_B2G_BT
   nsCOMPtr<nsIDOMBluetoothManager> mBluetooth;
 #endif
diff --git a/dom/base/nsDOMClassInfo.cpp b/dom/base/nsDOMClassInfo.cpp
--- a/dom/base/nsDOMClassInfo.cpp
+++ b/dom/base/nsDOMClassInfo.cpp
@@ -422,16 +422,19 @@
 #include "nsIDOMDataTransfer.h"
 
 // Geolocation
 #include "nsIDOMGeoGeolocation.h"
 #include "nsIDOMGeoPosition.h"
 #include "nsIDOMGeoPositionCoords.h"
 #include "nsIDOMGeoPositionError.h"
 
+// User media
+#include "nsIDOMNavigatorUserMedia.h"
+
 // Workers
 #include "mozilla/dom/workers/Workers.h"
 
 #include "nsDOMFile.h"
 #include "nsDOMFileReader.h"
 #include "nsIDOMFormData.h"
 
 #include "nsIDOMDOMStringMap.h"
@@ -2442,16 +2445,17 @@ nsDOMClassInfo::Init()
   DOM_CLASSINFO_MAP_BEGIN(Location, nsIDOMLocation)
     DOM_CLASSINFO_MAP_ENTRY(nsIDOMLocation)
   DOM_CLASSINFO_MAP_END
 
   DOM_CLASSINFO_MAP_BEGIN(Navigator, nsIDOMNavigator)
     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNavigator)
     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNavigatorDeviceStorage)
     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNavigatorGeolocation)
+    DOM_CLASSINFO_MAP_ENTRY(nsIDOMNavigatorUserMedia)
     DOM_CLASSINFO_MAP_CONDITIONAL_ENTRY(nsIDOMNavigatorDesktopNotification,
                                         Navigator::HasDesktopNotificationSupport())
     DOM_CLASSINFO_MAP_ENTRY(nsIDOMClientInformation)
     DOM_CLASSINFO_MAP_CONDITIONAL_ENTRY(nsIDOMMozNavigatorBattery,
                                         battery::BatteryManager::HasSupport())
     DOM_CLASSINFO_MAP_ENTRY(nsIDOMMozNavigatorSms)
 #ifdef MOZ_B2G_RIL
     DOM_CLASSINFO_MAP_ENTRY(nsIDOMNavigatorTelephony)
diff --git a/dom/media/Makefile.in b/dom/media/Makefile.in
new file mode 100644
--- /dev/null
+++ b/dom/media/Makefile.in
@@ -0,0 +1,36 @@
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this file,
+# You can obtain one at http://mozilla.org/MPL/2.0/.
+
+DEPTH            = ../..
+topsrcdir        = @top_srcdir@
+srcdir           = @srcdir@
+VPATH            = @srcdir@
+
+relativesrcdir   = dom/media
+
+include $(DEPTH)/config/autoconf.mk
+
+MODULE           = dom
+XPIDL_MODULE     = dom_media
+LIBRARY_NAME     = dom_media_s
+LIBXUL_LIBRARY   = 1
+FORCE_STATIC_LIB = 1
+
+include $(topsrcdir)/dom/dom-config.mk
+
+XPIDLSRCS = \
+  nsIDOMMediaStream.idl \
+  nsIDOMNavigatorUserMedia.idl \
+  $(NULL)
+
+EXPORTS = \
+  MediaManager.h \
+  $(NULL)
+
+CPPSRCS = \
+  MediaManager.cpp \
+  $(NULL)
+
+include $(topsrcdir)/config/config.mk
+include $(topsrcdir)/config/rules.mk
diff --git a/dom/media/MediaManager.cpp b/dom/media/MediaManager.cpp
new file mode 100644
--- /dev/null
+++ b/dom/media/MediaManager.cpp
@@ -0,0 +1,465 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "MediaManager.h"
+
+#include "MediaStreamGraph.h"
+#include "MediaEngineDefault.h"
+
+#include "nsJSUtils.h"
+#include "nsDOMFile.h"
+#include "nsContentUtils.h"
+#include "nsIScriptGlobalObject.h"
+
+namespace mozilla {
+namespace dom {
+namespace media {
+
+class DOMWindowHolder : public nsISupports
+{
+public:
+  DOMWindowHolder(nsIDOMWindow* aWindow)
+    : mWindow(aWindow) {}
+
+  ~DOMWindowHolder() {}
+
+  NS_DECL_ISUPPORTS
+
+  nsIDOMWindow*
+  GetDOMWindow()
+  {
+    NS_ASSERTION(NS_IsMainThread(), "Wrong thread!");
+    return mWindow;
+  }
+private:
+  nsCOMPtr<nsIDOMWindow> mWindow;
+};
+
+NS_IMPL_THREADSAFE_ISUPPORTS0(DOMWindowHolder)
+
+
+class ErrorCallbackRunnable : public nsRunnable {
+public:
+  ErrorCallbackRunnable(nsIDOMGetUserMediaErrorCallback *aError,
+    const nsString& aErrorMsg)
+    : mError(aError)
+    , mErrorMsg(aErrorMsg) {}
+
+  NS_IMETHOD
+  Run()
+  {
+    mError->OnError(mErrorMsg);
+    return NS_OK;
+  }
+
+private:
+  nsCOMPtr<nsIDOMGetUserMediaErrorCallback> mError;
+  const nsString mErrorMsg;
+};
+
+class SuccessCallbackRunnable : public nsRunnable {
+public:
+  SuccessCallbackRunnable(DOMWindowHolder* aWindow,
+    nsIDOMGetUserMediaSuccessCallback *aSuccess, nsILocalFile* aFile)
+    : mWindow(aWindow)
+    , mSuccess(aSuccess)
+    , mFile(aFile) {}
+
+  SuccessCallbackRunnable(DOMWindowHolder* aWindow,
+    nsIDOMGetUserMediaSuccessCallback *aSuccess, nsIDOMMediaStream *aStream)
+    : mWindow(aWindow)
+    , mSuccess(aSuccess)
+    , mStream(aStream) {}
+
+  JSContext*
+  contextForWindow()
+  {
+    nsCOMPtr<nsIDOMWindow> window = mWindow->GetDOMWindow();
+    nsCOMPtr<nsIScriptGlobalObject> sgo = do_QueryInterface(window);
+    if (!sgo) {
+      return nsnull;
+    }
+    nsIScriptContext *scriptContext = sgo->GetScriptContext();
+    if (!scriptContext) {
+      return nsnull;
+    }
+    JSContext *cx = scriptContext->GetNativeContext();
+    return cx;
+  }
+
+  jsval
+  nsIFileToJsval(nsILocalFile* aFile)
+  {
+    if (aFile == nsnull) {
+      return JSVAL_NULL;
+    }
+    
+    nsCOMPtr<nsIDOMBlob> blob = new nsDOMFileFile(aFile);
+
+    JSContext* cx = contextForWindow();
+
+    jsval wrapped;
+    nsContentUtils::WrapNative(cx,
+             JS_GetGlobalObject(cx),
+             blob,
+             &NS_GET_IID(nsIDOMFile),
+             &wrapped);
+    return wrapped;
+  }
+
+  jsval
+  streamToJsval(nsIDOMMediaStream* aStream)
+  {
+    if (aStream == nsnull) {
+      return JSVAL_NULL;
+    }
+    
+    JSContext* cx = contextForWindow();
+
+    jsval wrapped;
+    nsContentUtils::WrapNative(cx,
+             JS_GetGlobalObject(cx),
+             aStream,
+             &NS_GET_IID(nsIDOMMediaStream),
+             &wrapped);
+    return wrapped;
+  }
+
+  NS_IMETHOD
+  Run()
+  {
+    jsval result = JSVAL_NULL;
+
+    if (mFile) {
+      result = nsIFileToJsval(mFile);
+    } else if (mStream) {
+      result = streamToJsval(mStream);
+    }
+
+    mSuccess->OnSuccess(result);
+    return NS_OK;
+  }
+
+private:
+  nsRefPtr<DOMWindowHolder> mWindow;
+  nsCOMPtr<nsIDOMGetUserMediaSuccessCallback> mSuccess;
+  nsCOMPtr<nsILocalFile> mFile;
+  nsCOMPtr<nsIDOMMediaStream> mStream;
+};
+
+/**
+ * This runnable creates a nsDOMMediaStream from a given MediaEngineSource
+ * and returns it via a success callback. Both must be done on the main thread.
+ */
+class GetUserMediaCallbackRunnable : public nsRunnable {
+public:
+  GetUserMediaCallbackRunnable(DOMWindowHolder *aWindow,
+    MediaEngineSource *aSource, TrackID aId,
+    nsIDOMGetUserMediaSuccessCallback *aSuccess,
+    nsIDOMGetUserMediaErrorCallback *aError)
+    : mWindow(aWindow)
+    , mSource(aSource)
+    , mId(aId)
+    , mSuccess(aSuccess)
+    , mError(aError) {}
+
+
+  /**
+   * This inner class is an implementation of MediaStreamListener
+   */
+  class GetUserMediaCallbackMediaStreamListener : public MediaStreamListener {
+  public:
+    GetUserMediaCallbackMediaStreamListener(MediaEngineSource *aSource,
+      nsDOMMediaStream *aStream, TrackID aListenId)
+      : mSource(aSource)
+      , mStream(aStream)
+      , mId(aListenId) {}
+
+    void
+    NotifyConsumptionChanged(MediaStreamGraph* aGraph, Consumption aConsuming)
+    {
+      if (aConsuming == CONSUMED) {
+        nsDOMMediaStream* stream = mStream.get();
+        nsRefPtr<SourceMediaStream> sStream = stream->GetStream()->AsSourceStream();
+        mSource->Start(sStream.get(), mId);
+        return;
+      }
+
+      // NOT_CONSUMED
+      mSource->Stop();
+      return;
+    }
+
+    void NotifyBlockingChanged(MediaStreamGraph* aGraph, Blocking aBlocked) {}
+    void NotifyOutput(MediaStreamGraph* aGraph) {}
+    void NotifyFinished(MediaStreamGraph* aGraph) {}
+    void NotifyQueuedTrackChanges(MediaStreamGraph* aGraph, TrackID aID,
+      TrackRate aTrackRate, TrackTicks aTrackOffset,
+      PRUint32 aTrackEvents, const MediaSegment& aQueuedMedia) {}
+
+  private:
+    nsCOMPtr<MediaEngineSource> mSource;
+    nsCOMPtr<nsDOMMediaStream> mStream;
+    TrackID mId;
+  };
+
+  NS_IMETHOD
+  Run()
+  {
+    // Normally we would now get the name & UUID for the device and ask the
+    // user permission. We will do that when we have some UI.
+    nsCOMPtr<nsDOMMediaStream> mComStream = mSource->Allocate();
+    if (mComStream == nsnull) {
+      NS_DispatchToMainThread(new ErrorCallbackRunnable(
+        mError, NS_LITERAL_STRING("HARDWARE_UNAVAILABLE")
+      ));
+      return NS_ERROR_FAILURE;
+    }
+
+    // Add our listener. We'll call Start() on the source when get a bcallback
+    // that the MediaStream has started consuming.
+    nsDOMMediaStream* stream = mComStream.get();
+    MediaStream* mediaStream = stream->GetStream();
+
+    nsRefPtr<GetUserMediaCallbackMediaStreamListener> listener = 
+      new GetUserMediaCallbackMediaStreamListener(mSource, mComStream, mId);
+    mediaStream->AddListener(listener);
+
+    NS_DispatchToMainThread(new SuccessCallbackRunnable(
+      mWindow, mSuccess, stream
+    ));
+    return NS_OK;
+  }
+
+private:
+  nsRefPtr<DOMWindowHolder> mWindow;
+  nsCOMPtr<MediaEngineSource> mSource;
+  TrackID mId;
+  nsCOMPtr<nsIDOMGetUserMediaSuccessCallback> mSuccess;
+  nsCOMPtr<nsIDOMGetUserMediaErrorCallback> mError;
+};
+
+class GetUserMediaSnapshotCallbackRunable : public nsRunnable {
+public:
+  GetUserMediaSnapshotCallbackRunable(DOMWindowHolder *aWindow,
+    MediaEngineSource *aSource,
+    PRUint32 aDuration,
+    nsIDOMGetUserMediaSuccessCallback *aSuccessCallback,
+    nsIDOMGetUserMediaErrorCallback *aErrorCallback)
+    : mWindow(aWindow)
+    , mSource(aSource)
+    , mDuration(aDuration)
+    , mSuccessCallback(aSuccessCallback)
+    , mErrorCallback(aErrorCallback) {}
+
+  NS_IMETHOD
+  Run()
+  {
+    nsCOMPtr<nsDOMMediaStream> comStream = mSource->Allocate();
+    if (comStream == nsnull) {
+      NS_DispatchToMainThread(new ErrorCallbackRunnable(
+        mErrorCallback, NS_LITERAL_STRING("HARDWARE_UNAVAILABLE")
+      ));
+      return NS_ERROR_FAILURE;
+    }
+
+    nsCOMPtr<nsILocalFile> file;
+    mSource->Snapshot(mDuration, getter_AddRefs(file));
+
+    NS_DispatchToMainThread(new SuccessCallbackRunnable(
+      mWindow, mSuccessCallback, file
+    ));
+    return NS_OK;
+  }
+
+private:
+  nsRefPtr<DOMWindowHolder> mWindow;
+  nsCOMPtr<MediaEngineSource> mSource;
+  PRUint32 mDuration;
+  nsCOMPtr<nsIDOMGetUserMediaSuccessCallback> mSuccessCallback;
+  nsCOMPtr<nsIDOMGetUserMediaErrorCallback>  mErrorCallback;
+};
+
+/**
+ * Runs on a seperate thread and is responsible for enumerating devices.
+ * Depending on whether a picture or stream was asked for, either
+ * GetUserMediaCallbackRunnable or GetUserMediaSnapshotCallbackRunnable
+ * will be dispatched to the main thread to return the result to DOM.
+ */
+class GetUserMediaRunnable : public nsRunnable {
+public:
+  GetUserMediaRunnable(nsIDOMWindow* aWindow,
+    bool aAudio, bool aVideo, bool aPicture,
+    MediaManager* aManager,
+    nsIDOMGetUserMediaSuccessCallback* aSuccess,
+    nsIDOMGetUserMediaErrorCallback* aError)
+  : mAudio(aAudio)
+  , mVideo(aVideo)
+  , mPicture(aPicture)
+  , mManager(aManager)
+  , mSuccess(aSuccess)
+  , mError(aError)
+  {
+    mWindow = new DOMWindowHolder(aWindow);
+  }
+
+  // We only support 1 audio and 1 video track for now
+  enum {
+    kVideoTrack = 1,
+    kAudioTrack = 2
+  };
+
+  NS_IMETHOD
+  Run()
+  {
+
+    if (mPicture) {
+      return SendPicture();
+    }
+
+    // Implement merging two streams (See bug 758391).
+    if (mAudio && mVideo) {
+      NS_DispatchToMainThread(new ErrorCallbackRunnable(
+        mError, NS_LITERAL_STRING("NOT_IMPLEMENTED")
+      ));
+      return NS_OK;
+    }
+
+    if (mVideo) {
+      return SendVideo(); 
+    }
+
+    if (mAudio) {
+      return SendAudio(); 
+    }
+
+    return NS_ERROR_FAILURE;
+  }
+
+  NS_IMETHOD
+  SendPicture()
+  {
+    nsTArray<nsRefPtr<MediaEngineVideoSource> > videoSources;
+    MediaEngine* mBackend = mManager->GetBackend();
+    mBackend->EnumerateVideoDevices(&videoSources);
+
+    PRInt32 count = videoSources.Length();
+    if (!count) {
+      NS_DispatchToMainThread(new ErrorCallbackRunnable(
+        mError, NS_LITERAL_STRING("NO_DEVICES_FOUND")
+      ));
+      return NS_OK;
+    }
+    MediaEngineVideoSource* videoSource = videoSources[count - 1];
+    NS_DispatchToMainThread(new GetUserMediaSnapshotCallbackRunable(
+      mWindow, videoSource, 0 /* duration */, mSuccess, mError
+    ));
+    return NS_OK;
+  }
+    
+  NS_IMETHOD
+  SendVideo()
+  {
+    nsTArray<nsRefPtr<MediaEngineVideoSource> > videoSources;
+    MediaEngine* mBackend = mManager->GetBackend();
+    mBackend->EnumerateVideoDevices(&videoSources);
+
+    PRInt32 count = videoSources.Length();
+    if (!count) {
+      NS_DispatchToMainThread(new ErrorCallbackRunnable(
+        mError, NS_LITERAL_STRING("NO_DEVICES_FOUND")
+      ));
+      return NS_OK;
+    }
+
+    MediaEngineVideoSource* videoSource = videoSources[count - 1];
+    NS_DispatchToMainThread(new GetUserMediaCallbackRunnable(
+      mWindow, videoSource, kVideoTrack, mSuccess, mError
+    ));
+    return NS_OK;
+  }
+    
+  NS_IMETHOD
+  SendAudio()
+  {
+    nsTArray<nsRefPtr<MediaEngineAudioSource> > audioSources;
+    MediaEngine* mBackend = mManager->GetBackend();
+    mBackend->EnumerateAudioDevices(&audioSources);
+
+    PRInt32 count = audioSources.Length();
+    if (!count) {
+      NS_DispatchToMainThread(new ErrorCallbackRunnable(
+        mError, NS_LITERAL_STRING("NO_DEVICES_FOUND")
+      ));
+      return NS_OK;
+    }
+
+    MediaEngineAudioSource* audioSource = audioSources[count - 1];
+    NS_DispatchToMainThread(new GetUserMediaCallbackRunnable(
+      mWindow, audioSource, kAudioTrack, mSuccess, mError
+    ));
+    return NS_OK;
+  }
+
+private:
+  bool mAudio;
+  bool mVideo;
+  bool mPicture;
+
+  nsRefPtr<MediaManager> mManager;
+
+  nsCOMPtr<nsIDOMGetUserMediaSuccessCallback> mSuccess;
+  nsCOMPtr<nsIDOMGetUserMediaErrorCallback> mError;
+  nsRefPtr<DOMWindowHolder> mWindow;
+};
+
+
+NS_IMPL_THREADSAFE_ISUPPORTS0(MediaManager)
+
+MediaEngine*
+MediaManager::GetBackend()
+{
+  if (!mBackend) {
+    mBackend = new MediaEngineDefault();
+  }
+  return mBackend;
+}
+
+nsresult
+MediaManager::GetUserMedia(nsIDOMWindow* aWindow,
+  nsIMediaStreamOptions *aParams,
+  nsIDOMGetUserMediaSuccessCallback* onSuccess,
+  nsIDOMGetUserMediaErrorCallback* onError)
+{
+  NS_ENSURE_TRUE(aParams, NS_ERROR_NULL_POINTER);
+  
+  bool audio, video, picture;
+  nsresult rv = aParams->GetPicture(&picture);
+  NS_ENSURE_SUCCESS(rv, rv);
+
+  rv = aParams->GetAudio(&audio);
+  NS_ENSURE_SUCCESS(rv, rv);
+
+  rv = aParams->GetVideo(&video);
+  NS_ENSURE_SUCCESS(rv, rv);
+
+  // We only support "front" or "back". TBD: Send to GetUserMediaRunnable.
+  nsString cameraType;
+  rv = aParams->GetCamera(cameraType);
+  NS_ENSURE_SUCCESS(rv, rv);
+  
+  nsCOMPtr<nsIRunnable> gUMRunnable = new GetUserMediaRunnable(
+    aWindow, audio, video, picture, this, onSuccess, onError
+  );
+
+  nsCOMPtr<nsIThread> gUMThread;
+  rv = NS_NewThread(getter_AddRefs(gUMThread), gUMRunnable);
+  NS_ENSURE_SUCCESS(rv, rv);
+
+  return NS_OK;
+}
+
+}
+}
+}
diff --git a/dom/media/MediaManager.h b/dom/media/MediaManager.h
new file mode 100644
--- /dev/null
+++ b/dom/media/MediaManager.h
@@ -0,0 +1,32 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "MediaEngine.h"
+#include "nsIDOMWindow.h"
+#include "nsIDOMNavigatorUserMedia.h"
+
+namespace mozilla {
+namespace dom {
+namespace media {
+
+class MediaManager : public nsISupports {
+public:
+  MediaManager() : mBackend(nsnull) {};
+  ~MediaManager() { delete mBackend; };
+
+  NS_DECL_ISUPPORTS
+
+  MediaEngine* GetBackend();
+  nsresult GetUserMedia(nsIDOMWindow* aWindow,
+			nsIMediaStreamOptions *aParams,
+			nsIDOMGetUserMediaSuccessCallback* onSuccess,
+			nsIDOMGetUserMediaErrorCallback* onError);
+
+private:
+  MediaEngine* mBackend;
+};
+
+}
+}
+}
diff --git a/content/media/nsIDOMMediaStream.idl b/dom/media/nsIDOMMediaStream.idl
rename from content/media/nsIDOMMediaStream.idl
rename to dom/media/nsIDOMMediaStream.idl
diff --git a/dom/media/nsIDOMNavigatorUserMedia.idl b/dom/media/nsIDOMNavigatorUserMedia.idl
new file mode 100644
--- /dev/null
+++ b/dom/media/nsIDOMNavigatorUserMedia.idl
@@ -0,0 +1,39 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "nsISupports.idl"
+#include "nsIDOMMediaStream.idl"
+
+[scriptable, function, uuid(f2a144fc-3534-4761-8c5d-989ae720f89a)]
+interface nsIDOMGetUserMediaSuccessCallback : nsISupports
+{
+  /* 
+   * value must be a nsIDOMBlob if picture is true and a
+   * nsIDOMMediaStream if either audio or video are true.
+   */
+  void onSuccess(in jsval value);
+};
+
+[scriptable, function, uuid(2614bbcf-85cc-43e5-8740-964f52bdc7ca)]
+interface nsIDOMGetUserMediaErrorCallback : nsISupports
+{
+  void onError(in DOMString error);
+};
+
+[scriptable, uuid(8a26205e-e8f7-4372-bd15-97ff982b4c1c)]
+interface nsIMediaStreamOptions : nsISupports
+{
+  readonly attribute boolean audio;
+  readonly attribute boolean video;
+  readonly attribute boolean picture;
+  readonly attribute DOMString camera;
+};
+
+[scriptable, uuid(381e0071-0be5-4f6b-ae21-8e3407a37faa)]
+interface nsIDOMNavigatorUserMedia : nsISupports
+{
+  void mozGetUserMedia(in nsIMediaStreamOptions params,
+		       in nsIDOMGetUserMediaSuccessCallback onsuccess,
+		       in nsIDOMGetUserMediaErrorCallback onerror);
+};
diff --git a/layout/build/Makefile.in b/layout/build/Makefile.in
--- a/layout/build/Makefile.in
+++ b/layout/build/Makefile.in
@@ -61,16 +61,17 @@ SHARED_LIBRARY_LIBS = \
 	$(DEPTH)/view/src/$(LIB_PREFIX)gkview_s.$(LIB_SUFFIX) \
 	$(DEPTH)/dom/base/$(LIB_PREFIX)jsdombase_s.$(LIB_SUFFIX) \
 	$(DEPTH)/dom/battery/$(LIB_PREFIX)dom_battery_s.$(LIB_SUFFIX) \
 	$(DEPTH)/dom/contacts/$(LIB_PREFIX)jsdomcontacts_s.$(LIB_SUFFIX) \
 	$(DEPTH)/dom/devicestorage/$(LIB_PREFIX)domdevicestorage_s.$(LIB_SUFFIX) \
 	$(DEPTH)/dom/power/$(LIB_PREFIX)dom_power_s.$(LIB_SUFFIX) \
 	$(DEPTH)/dom/settings/$(LIB_PREFIX)jsdomsettings_s.$(LIB_SUFFIX) \
 	$(DEPTH)/dom/network/src/$(LIB_PREFIX)dom_network_s.$(LIB_SUFFIX) \
+	$(DEPTH)/dom/media/src/$(LIB_PREFIX)dom_media_s.$(LIB_SUFFIX) \
 	$(DEPTH)/dom/sms/src/$(LIB_PREFIX)dom_sms_s.$(LIB_SUFFIX) \
 	$(DEPTH)/dom/src/events/$(LIB_PREFIX)jsdomevents_s.$(LIB_SUFFIX) \
 	$(DEPTH)/dom/src/json/$(LIB_PREFIX)json_s.$(LIB_SUFFIX) \
 	$(DEPTH)/dom/src/jsurl/$(LIB_PREFIX)jsurl_s.$(LIB_SUFFIX) \
 	$(DEPTH)/dom/src/storage/$(LIB_PREFIX)jsdomstorage_s.$(LIB_SUFFIX) \
 	$(DEPTH)/dom/src/offline/$(LIB_PREFIX)jsdomoffline_s.$(LIB_SUFFIX) \
 	$(DEPTH)/dom/src/geolocation/$(LIB_PREFIX)jsdomgeolocation_s.$(LIB_SUFFIX) \
 	$(DEPTH)/dom/src/notification/$(LIB_PREFIX)jsdomnotification_s.$(LIB_SUFFIX) \
diff --git a/mobile/android/installer/package-manifest.in b/mobile/android/installer/package-manifest.in
--- a/mobile/android/installer/package-manifest.in
+++ b/mobile/android/installer/package-manifest.in
@@ -158,16 +158,17 @@
 @BINPATH@/components/dom_apps.xpt
 @BINPATH@/components/dom_base.xpt
 @BINPATH@/components/dom_battery.xpt
 @BINPATH@/components/dom_canvas.xpt
 @BINPATH@/components/dom_core.xpt
 @BINPATH@/components/dom_css.xpt
 @BINPATH@/components/dom_events.xpt
 @BINPATH@/components/dom_geolocation.xpt
+@BINPATH@/components/dom_media.xpt
 @BINPATH@/components/dom_network.xpt
 @BINPATH@/components/dom_notification.xpt
 @BINPATH@/components/dom_html.xpt
 @BINPATH@/components/dom_indexeddb.xpt
 @BINPATH@/components/dom_offline.xpt
 @BINPATH@/components/dom_json.xpt
 @BINPATH@/components/dom_range.xpt
 @BINPATH@/components/dom_sidebar.xpt
