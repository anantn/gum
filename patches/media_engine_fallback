# HG changeset patch
# Parent 6c6a164df085a9f474ef5f0e3fd9fe666e8be43c
# User Anant Narayanan <anant@kix.in>
Implement fallback media engine

diff --git a/content/media/Makefile.in b/content/media/Makefile.in
--- a/content/media/Makefile.in
+++ b/content/media/Makefile.in
@@ -49,16 +49,17 @@ XPIDL_MODULE = content_media
 XPIDLSRCS = \
   nsIDOMMediaStream.idl \
   $(NULL)
 
 EXPORTS = \
   AudioSegment.h \
   FileBlockCache.h \
   MediaEngine.h \
+  MediaEngineDefault.h \
   MediaResource.h \
   MediaSegment.h \
   MediaStreamGraph.h \
   nsAudioAvailableEventManager.h \
   nsBuiltinDecoder.h \
   nsBuiltinDecoderStateMachine.h \
   nsBuiltinDecoderReader.h \
   nsDOMMediaStream.h \
@@ -70,16 +71,17 @@ EXPORTS = \
   VideoFrameContainer.h \
   VideoUtils.h \
   VideoSegment.h \
   $(NULL)
 
 CPPSRCS = \
   AudioSegment.cpp \
   FileBlockCache.cpp \
+  MediaEngineDefault.cpp \
   MediaResource.cpp \
   MediaStreamGraph.cpp \
   nsAudioAvailableEventManager.cpp \
   nsBuiltinDecoder.cpp \
   nsBuiltinDecoderStateMachine.cpp \
   nsBuiltinDecoderReader.cpp \
   nsDOMMediaStream.cpp \
   nsMediaCache.cpp \
diff --git a/content/media/MediaEngineDefault.cpp b/content/media/MediaEngineDefault.cpp
new file mode 100644
--- /dev/null
+++ b/content/media/MediaEngineDefault.cpp
@@ -0,0 +1,235 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "MediaEngineDefault.h"
+
+#define WIDTH 320
+#define HEIGHT 240
+#define FPS 10
+#define CHANNELS 1
+
+#define TRACK_VIDEO 1
+#define TRACK_AUDIO 2
+#define RATE USECS_PER_S
+
+namespace mozilla {
+
+/**
+ * Default video source.
+ */
+nsresult
+MediaEngineDefaultVideoSource::GetName(nsAString& aName)
+{
+  aName.Assign(NS_LITERAL_STRING("Default Video Device"));
+  return NS_OK;
+}
+
+nsDOMMediaStream*
+MediaEngineDefaultVideoSource::Allocate()
+{
+  if (mState != kReleased) {
+    return NULL;
+  }
+
+  mState = kAllocated;
+  return NULL;
+  //return new nsDOMMediaStreamHelper(this);
+}
+
+nsresult
+MediaEngineDefaultVideoSource::Deallocate()
+{
+  if (mState != kStopped && mState != kAllocated) {
+    return NS_ERROR_FAILURE;
+  }
+  mState = kReleased;
+  return NS_OK;
+}
+
+nsresult
+MediaEngineDefaultVideoSource::GetOptions(mediaEngineVideoOptions *aOpts)
+{
+  aOpts->interlaced = false;
+  aOpts->width = WIDTH;
+  aOpts->height = HEIGHT;
+  aOpts->maxFPS = FPS;
+  aOpts->codecType = kVideoCodecI420;
+  return NS_OK;
+}
+
+SourceMediaStream*
+MediaEngineDefaultVideoSource::Start()
+{
+  if (mState != kAllocated) {
+    return NULL;
+  }
+
+  mTimer = do_CreateInstance(NS_TIMER_CONTRACTID);
+  if (!mTimer) {
+    return NULL;
+  }
+
+  mStream = nsDOMMediaStream::CreateInputStream();
+  if (!mStream) {
+    return NULL;
+  }
+  mSource = mStream->GetStream()->AsSourceStream();
+
+  VideoSegment *segment = new VideoSegment();
+  mSource->AddTrack(TRACK_VIDEO, RATE, 0, segment);
+
+  /* Allocate a single blank Image */
+  {
+    typedef layers::Image Image;
+
+    Image::Format format = Image::PLANAR_YCBCR;
+    mImageContainer = layers::LayerManager::CreateImageContainer();
+    
+    nsRefPtr<Image> image = mImageContainer->CreateImage(&format, 1);
+  
+    mImage = static_cast<layers::PlanarYCbCrImage*>(image.get());
+    PRUint8* frame = (PRUint8*) PR_Calloc((WIDTH * HEIGHT) / 2, 3);
+    const PRUint8 lumaBpp = 8;
+    const PRUint8 chromaBpp = 4; 
+
+    layers::PlanarYCbCrImage::Data data;
+    data.mYChannel = frame;
+    data.mYSize = gfxIntSize(WIDTH, HEIGHT);
+    data.mYStride = WIDTH * lumaBpp / 8.0;
+    data.mCbCrStride = WIDTH * chromaBpp / 8.0;
+    data.mCbChannel = frame + HEIGHT * data.mYStride;
+    data.mCrChannel = data.mCbChannel + HEIGHT * data.mCbCrStride / 2;
+    data.mCbCrSize = gfxIntSize(WIDTH / 2, HEIGHT / 2);
+    data.mPicX = 0;
+    data.mPicY = 0;
+    data.mPicSize = gfxIntSize(WIDTH, HEIGHT);
+    data.mStereoMode = layers::STEREO_MODE_MONO;
+
+    mImage->SetData(data);
+    PR_Free(frame);
+  }
+
+  mTimer->InitWithCallback(this, 1000 / FPS, nsITimer::TYPE_REPEATING_SLACK);
+  mState = kStarted;
+  return mSource;
+}
+
+nsresult
+MediaEngineDefaultVideoSource::Stop()
+{
+  if (mState != kStarted) {
+    return NS_ERROR_FAILURE;
+  }
+  if (!mTimer) {
+    return NS_ERROR_FAILURE;
+  }
+
+  mTimer->Cancel();
+  mTimer = NULL;
+  mState = kStopped;
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+MediaEngineDefaultVideoSource::Notify(nsITimer* aTimer)
+{
+  ReentrantMonitorAutoEnter enter(mMonitor);
+
+  VideoSegment *segment = new VideoSegment();
+  segment->AppendFrame(mImage, USECS_PER_S / FPS, gfxIntSize(WIDTH, HEIGHT));
+  mSource->AppendToTrack(TRACK_VIDEO, segment);
+
+  return NS_OK;
+}
+
+/**
+ * Default audio source.
+ */
+nsresult
+MediaEngineDefaultAudioSource::GetName(nsAString& aName)
+{
+  aName.Assign(NS_LITERAL_STRING("Default Audio Device"));
+  return NS_OK;
+}
+
+nsDOMMediaStream*
+MediaEngineDefaultAudioSource::Allocate()
+{
+  if (mState != kReleased) {
+    return NULL;
+  }
+  mState = kAllocated;
+  //return new nsDOMMediaStreamHelper(this);
+  return NULL;
+}
+
+nsresult
+MediaEngineDefaultAudioSource::Deallocate()
+{
+  if (mState != kStopped && mState != kAllocated) {
+    return NS_ERROR_FAILURE;
+  }
+  mState = kReleased;
+  return NS_OK;
+}
+
+SourceMediaStream*
+MediaEngineDefaultAudioSource::Start()
+{
+  if (mState != kAllocated) {
+    return NULL;
+  }
+
+  mTimer = do_CreateInstance(NS_TIMER_CONTRACTID);
+  if (!mTimer) {
+    return NULL;
+  }
+
+  mStream = nsDOMMediaStream::CreateInputStream();
+  if (!mStream) {
+    return NULL;
+  }
+  mSource = mStream->GetStream()->AsSourceStream();
+
+  AudioSegment *segment = new AudioSegment();
+  segment->Init(CHANNELS);
+  mSource->AddTrack(TRACK_AUDIO, RATE, 0, segment);
+
+  // 1 Audio frame per Video frame.
+  mTimer->InitWithCallback(this, 1000 / FPS, nsITimer::TYPE_REPEATING_SLACK);
+  mState = kStarted;
+  return mSource;
+}
+
+nsresult
+MediaEngineDefaultAudioSource::Stop()
+{
+  if (mState != kStarted) {
+    return NS_ERROR_FAILURE;
+  }
+  if (!mTimer) {
+    return NS_ERROR_FAILURE;
+  }
+
+  mTimer->Cancel();
+  mTimer = NULL;
+  mState = kStopped;
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+MediaEngineDefaultAudioSource::Notify(nsITimer* aTimer)
+{
+  ReentrantMonitorAutoEnter enter(mMonitor);
+
+  AudioSegment *segment = new AudioSegment();
+  segment->Init(CHANNELS);
+  segment->InsertNullDataAtStart(1); // One tick?
+
+  mSource->AppendToTrack(TRACK_AUDIO, segment);
+
+  return NS_OK;
+}
+
+}
diff --git a/content/media/MediaEngineDefault.h b/content/media/MediaEngineDefault.h
new file mode 100644
--- /dev/null
+++ b/content/media/MediaEngineDefault.h
@@ -0,0 +1,117 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef MEDIAENGINEDEFAULT_H_
+#define MEDIAENGINEDEFAULT_H_
+
+#include "prmem.h"
+#include "nsITimer.h"
+
+#include "nsCOMPtr.h"
+#include "nsDOMMediaStream.h"
+#include "nsComponentManagerUtils.h"
+
+#include "Layers.h"
+#include "VideoUtils.h"
+#include "MediaEngine.h"
+#include "ImageLayers.h"
+#include "VideoSegment.h"
+#include "AudioSegment.h"
+#include "StreamBuffer.h"
+#include "MediaStreamGraph.h"
+
+namespace mozilla {
+
+/**
+ * The default implementation of the MediaEngine interface.
+ */
+
+enum defaultEngineState {
+  kAllocated,
+  kStarted,
+  kStopped,
+  kReleased
+};
+
+class MediaEngineDefaultVideoSource : public nsITimerCallback,
+                                      public MediaEngineVideoSource
+                                        
+{
+public:
+  MediaEngineDefaultVideoSource() : mTimer(nsnull), mStream(nsnull),
+                                    mState(kReleased), mMonitor("Video.Engine") {}
+  virtual ~MediaEngineDefaultVideoSource();
+
+  nsresult GetName(nsAString&);
+  nsDOMMediaStream* Allocate();
+  nsresult Deallocate();
+  SourceMediaStream* Start();
+  nsresult GetOptions(mediaEngineVideoOptions*);
+  nsresult Stop();
+
+  NS_DECL_ISUPPORTS
+  NS_DECL_NSITIMERCALLBACK
+
+protected:
+  nsCOMPtr<nsITimer> mTimer;
+  nsCOMPtr<nsDOMMediaStream> mStream;
+  nsRefPtr<layers::ImageContainer> mImageContainer;
+
+  defaultEngineState mState;
+  ReentrantMonitor mMonitor;
+  SourceMediaStream* mSource;
+  layers::PlanarYCbCrImage* mImage;
+};
+
+class MediaEngineDefaultAudioSource : public nsITimerCallback,
+                                      public MediaEngineAudioSource
+                                        
+{
+public:
+  MediaEngineDefaultAudioSource() : mTimer(nsnull), mStream(nsnull),
+                                    mState(kReleased), mMonitor("Audio.Engine") {}
+  virtual ~MediaEngineDefaultAudioSource();
+
+  nsresult GetName(nsAString&);
+  nsDOMMediaStream* Allocate();
+  nsresult Deallocate();
+  SourceMediaStream* Start();
+  nsresult Stop();
+
+  NS_DECL_ISUPPORTS
+  NS_DECL_NSITIMERCALLBACK
+
+protected:
+  nsCOMPtr<nsITimer> mTimer;
+  nsCOMPtr<nsDOMMediaStream> mStream;
+
+  defaultEngineState mState;
+  ReentrantMonitor mMonitor;
+  SourceMediaStream* mSource;
+};
+
+class MediaEngineDefault : public MediaEngine
+{
+public:
+  MediaEngineDefault() {
+    vSources = new MediaEngineDefaultVideoSource[1];
+    aSources = new MediaEngineDefaultAudioSource[1];
+  }
+  MediaEngineVideoSource* EnumerateVideoDevices(PRInt32 &length) {
+    length = 1;
+    return vSources;
+  }
+  MediaEngineAudioSource* EnumerateAudioDevices(PRInt32 &length) {
+    length = 1;
+    return aSources;
+  }
+
+private:
+  MediaEngineDefaultVideoSource* vSources;
+  MediaEngineDefaultAudioSource* aSources;
+};
+
+}
+
+#endif /* NSMEDIAENGINEDEFAULT_H_ */
\ No newline at end of file
