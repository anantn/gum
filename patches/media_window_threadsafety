# HG changeset patch
# Parent d4e55cc1a8b30fc2b58dc008dd411d4c5508fdf3
# User Doug Turner <dougt@dougt.org>
diff --git a/dom/media/src/MediaManager.cpp b/dom/media/src/MediaManager.cpp
--- a/dom/media/src/MediaManager.cpp
+++ b/dom/media/src/MediaManager.cpp
@@ -7,16 +7,37 @@
 #include "nsIScriptGlobalObject.h"
 #include "nsContentUtils.h"
 #include "nsDOMFile.h"
 
 namespace mozilla {
 namespace dom {
 namespace media {
 
+class DOMWindowHolder : public nsISupports
+{
+public:
+  DOMWindowHolder(nsIDOMWindow* aWindow)
+    : mWindow(aWindow) {}
+
+    ~DOMWindowHolder() {}
+
+    NS_DECL_ISUPPORTS
+
+    nsIDOMWindow* GetDOMWindow() {
+      NS_ASSERTION(NS_IsMainThread(), "Wrong thread!");
+      return mWindow;
+    }
+private:
+  nsCOMPtr<nsIDOMWindow> mWindow;
+};
+
+NS_IMPL_THREADSAFE_ISUPPORTS0(DOMWindowHolder)
+
+
 class ErrorCallbackRunnable : public nsRunnable {
 public:
   ErrorCallbackRunnable(nsIDOMGetUserMediaErrorCallback *aError, const nsString& aErrorMsg)
     : mError(aError)
     , mErrorMsg(aErrorMsg) {}
 
   NS_IMETHOD Run() {
     mError->OnError(mErrorMsg);
@@ -25,38 +46,105 @@ public:
 
 private:
   nsCOMPtr<nsIDOMGetUserMediaErrorCallback> mError;
   const nsString mErrorMsg;
 };
 
 class SuccessCallbackRunnable : public nsRunnable {
 public:
-  SuccessCallbackRunnable(nsIDOMGetUserMediaSuccessCallback *aSuccess, jsval aResult)
-    : mSuccess(aSuccess),
-      mResult(aResult) {}
+  SuccessCallbackRunnable(DOMWindowHolder* aWindow, nsIDOMGetUserMediaSuccessCallback *aSuccess, nsILocalFile* aFile)
+    : mWindow(aWindow)
+    , mSuccess(aSuccess)
+    , mFile(aFile) {}
+
+  SuccessCallbackRunnable(DOMWindowHolder* aWindow, nsIDOMGetUserMediaSuccessCallback *aSuccess, nsIDOMMediaStream *aStream)
+    : mWindow(aWindow)
+    , mSuccess(aSuccess)
+    , mStream(aStream) {}
+
+  JSContext* contextForWindow() {
+    nsCOMPtr<nsIDOMWindow> window = mWindow->GetDOMWindow();
+    nsCOMPtr<nsIScriptGlobalObject> sgo = do_QueryInterface(window);
+    if (!sgo) {
+      return nsnull;
+    }
+    nsIScriptContext *scriptContext = sgo->GetScriptContext();
+    if (!scriptContext) {
+      return nsnull;
+    }
+    JSContext *cx = scriptContext->GetNativeContext();
+    return cx;
+  }
+
+  jsval nsIFileToJsval(nsILocalFile* aFile)
+  {
+    if (aFile == nsnull) {
+      return JSVAL_NULL;
+    }
+    
+    nsCOMPtr<nsIDOMBlob> blob = new nsDOMFileFile(aFile);
+
+    JSContext* cx = contextForWindow();
+
+    jsval wrapped;
+    nsContentUtils::WrapNative(cx,
+			       JS_GetGlobalObject(cx),
+			       blob,
+			       &NS_GET_IID(nsIDOMFile),
+			       &wrapped);
+    return wrapped;
+  }
+
+  jsval streamToJsval(nsIDOMMediaStream* aStream)
+  {
+    if (aStream == nsnull) {
+      return JSVAL_NULL;
+    }
+    
+    JSContext* cx = contextForWindow();
+
+    jsval wrapped;
+    nsContentUtils::WrapNative(cx,
+			       JS_GetGlobalObject(cx),
+			       aStream,
+			       &NS_GET_IID(nsIDOMMediaStream),
+			       &wrapped);
+    return wrapped;
+  }
 
   NS_IMETHOD Run() {
-    mSuccess->OnSuccess(mResult);
+
+    jsval result = JSVAL_NULL;
+
+    if (mFile) {
+      result = nsIFileToJsval(mFile);
+    } else if (mStream) {
+      result = streamToJsval(mStream);
+    }
+
+    mSuccess->OnSuccess(result);
     return NS_OK;
   }
 
 private:
+  nsRefPtr<DOMWindowHolder> mWindow;
   nsCOMPtr<nsIDOMGetUserMediaSuccessCallback> mSuccess;
-  jsval mResult;
+  nsCOMPtr<nsILocalFile> mFile;
+  nsCOMPtr<nsIDOMMediaStream> mStream;
 };
 
 /**
  * This runnable creates a nsDOMMediaStream from a given MediaEngineSource
  * and returns it via a success callback. Both must be done on the main thread.
  */
 class GetUserMediaCallbackRunable : public nsRunnable,
                                     public MediaStreamListener {
 public:
-  GetUserMediaCallbackRunable(nsIDOMWindow *aWindow,
+  GetUserMediaCallbackRunable(DOMWindowHolder *aWindow,
 			      MediaEngineSource *aSource,
 			      TrackID aId,
 			      nsIDOMGetUserMediaSuccessCallback *aSuccess,
 			      nsIDOMGetUserMediaErrorCallback *aError)
     : mWindow(aWindow)
     , mSource(aSource)
     , mId(aId)
     , mSuccess(aSuccess)
@@ -72,40 +160,17 @@ public:
     }
 
     // Add our listener. We'll call Start() on the source when get a bcallback
     // that the MediaStream has started consuming.
     nsDOMMediaStream* stream = mComStream.get();
     MediaStream* mediaStream = stream->GetStream();
     mediaStream->AddListener(this);
 
-
-    nsCOMPtr<nsIScriptGlobalObject> sgo = do_QueryInterface(mWindow);
-    if (!sgo) {
-      return NS_ERROR_FAILURE;
-    }
-
-    nsIScriptContext *scriptContext = sgo->GetScriptContext();
-    if (!scriptContext) {
-      return NS_ERROR_FAILURE;
-    }
-      
-    JSContext *cx = scriptContext->GetNativeContext();
-    if (!cx) {
-      return NS_ERROR_FAILURE;
-    }
-
-    jsval wrapped;
-    nsContentUtils::WrapNative(cx,
-			       JS_GetGlobalObject(cx),
-			       stream,
-			       &NS_GET_IID(nsIDOMMediaStream),
-			       &wrapped);
-
-    NS_DispatchToMainThread(new SuccessCallbackRunnable(mSuccess, wrapped));
+    NS_DispatchToMainThread(new SuccessCallbackRunnable(mWindow, mSuccess, stream));
     return NS_OK;
   }
 
   void NotifyConsumptionChanged(MediaStreamGraph* aGraph, Consumption aConsuming) {
     if (aConsuming == CONSUMED) {
       nsDOMMediaStream* stream = mComStream.get();
       nsRefPtr<SourceMediaStream> sStream = stream->GetStream()->AsSourceStream();
       mSource->Start(sStream.get(), mId);
@@ -122,91 +187,54 @@ public:
   void NotifyFinished(MediaStreamGraph* aGraph) {}
   void NotifyQueuedTrackChanges(MediaStreamGraph* aGraph, TrackID aID,
                                 TrackRate aTrackRate,
                                 TrackTicks aTrackOffset,
                                 PRUint32 aTrackEvents,
                                 const MediaSegment& aQueuedMedia) {}
 
 private:
-  nsCOMPtr<nsIDOMWindow> mWindow;
+  nsRefPtr<DOMWindowHolder> mWindow;
   nsCOMPtr<MediaEngineSource> mSource;
   TrackID mId;
   nsCOMPtr<nsIDOMGetUserMediaSuccessCallback> mSuccess;
   nsCOMPtr<nsIDOMGetUserMediaErrorCallback> mError;
   nsCOMPtr<nsDOMMediaStream> mComStream;
 };
 
 class GetUserMediaSnapshotCallbackRunable : public nsRunnable {
 public:
-  GetUserMediaSnapshotCallbackRunable(nsIDOMWindow *aWindow,
+  GetUserMediaSnapshotCallbackRunable(DOMWindowHolder *aWindow,
 				      MediaEngineSource *aSource,
 				      PRUint32 aDuration,
 				      nsIDOMGetUserMediaSuccessCallback *aSuccessCallback,
 				      nsIDOMGetUserMediaErrorCallback *aErrorCallback)
     : mWindow(aWindow)
     , mSource(aSource)
     , mDuration(aDuration)
     , mSuccessCallback(aSuccessCallback)
     , mErrorCallback(aErrorCallback) {}
 
-  jsval nsIFileToJsval(nsILocalFile* aFile)
-  {
-    if (aFile == nsnull) {
-      return JSVAL_NULL;
-    }
-    nsCOMPtr<nsIDOMBlob> blob = new nsDOMFileFile(aFile);
-    nsCOMPtr<nsIScriptGlobalObject> sgo = do_QueryInterface(mWindow);
-    if (!sgo) {
-      return JSVAL_NULL;
-    }
-    nsIScriptContext *scriptContext = sgo->GetScriptContext();
-    if (!scriptContext) {
-      return JSVAL_NULL;
-    }
-    JSContext *cx = scriptContext->GetNativeContext();
-    if (!cx) {
-      return JSVAL_NULL;
-    }
-
-    jsval wrappedFile;
-    nsresult rv = nsContentUtils::WrapNative(cx,
-					     JS_GetGlobalObject(cx),
-					     blob,
-					     &NS_GET_IID(nsIDOMFile),
-					     &wrappedFile);
-    if (NS_FAILED(rv)) {
-      return JSVAL_NULL;
-    }
-    return wrappedFile;
-  }
-
   NS_IMETHOD Run() {
 
     nsCOMPtr<nsDOMMediaStream> comStream = mSource->Allocate();
     if (comStream == nsnull) {
 	NS_DispatchToMainThread(new ErrorCallbackRunnable(mErrorCallback, NS_LITERAL_STRING("HARDWARE_UNAVAILABLE")));
       return NS_ERROR_FAILURE;
     }
 
     nsCOMPtr<nsILocalFile> file;
     nsresult rv = mSource->Snapshot(mDuration, getter_AddRefs(file));
 
-    jsval wrapped = nsIFileToJsval(file);
-    if (NS_FAILED(rv) || wrapped == JSVAL_NULL) {
-      NS_DispatchToMainThread(new ErrorCallbackRunnable(mErrorCallback, NS_LITERAL_STRING("UNKNOWN_ERROR")));
-      return NS_OK;
-    }
-
-    NS_DispatchToMainThread(new SuccessCallbackRunnable(mSuccessCallback, wrapped));
+    NS_DispatchToMainThread(new SuccessCallbackRunnable(mWindow, mSuccessCallback, file));
     return NS_OK;
   }
 
 private:
-  nsCOMPtr<nsIDOMWindow> mWindow;
+  nsRefPtr<DOMWindowHolder> mWindow;
   nsCOMPtr<MediaEngineSource> mSource;
   PRUint32 mDuration;
   nsCOMPtr<nsIDOMGetUserMediaSuccessCallback> mSuccessCallback;
   nsCOMPtr<nsIDOMGetUserMediaErrorCallback>  mErrorCallback;
 };
 
 class GetUserMediaRunnable : public nsRunnable {
 public:
@@ -221,17 +249,17 @@ public:
     mAudio = aAudio;
     mVideo = aVideo;
     mPicture = aPicture; 
 
     mManager = aManager;
     mSuccess = aOnSuccess;
     mError = aOnError;
 
-    mWindow = aWindow;
+    mWindow = new DOMWindowHolder(aWindow);
   }
 
   NS_IMETHOD Run() {
 
     nsTArray<nsRefPtr<mozilla::MediaEngineVideoSource> > videoSources;
     nsTArray<nsRefPtr<mozilla::MediaEngineAudioSource> > audioSources;
     mozilla::MediaEngine* mBackend = mManager->GetBackend();  
 
@@ -299,17 +327,17 @@ private:
   bool mAudio;
   bool mVideo;
   bool mPicture;
 
   nsRefPtr<MediaManager> mManager;
 
   nsCOMPtr<nsIDOMGetUserMediaSuccessCallback> mSuccess;
   nsCOMPtr<nsIDOMGetUserMediaErrorCallback> mError;
-  nsCOMPtr<nsIDOMWindow> mWindow;
+  nsRefPtr<DOMWindowHolder> mWindow;
 };
 
 
 NS_IMPL_ISUPPORTS0(MediaManager)
 
 mozilla::MediaEngine*
 MediaManager::GetBackend() {
   // Replace with real backends as we add platform support
